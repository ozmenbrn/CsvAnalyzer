{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport EventListener from 'react-event-listener';\nimport { componentPropType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { duration } from '../styles/transitions';\nimport ClickAwayListener from '../ClickAwayListener';\nimport { capitalize, createChainedFunction } from '../utils/helpers';\nimport Slide from '../Slide';\nimport SnackbarContent from '../SnackbarContent';\nexport const styles = theme => {\n  const gutter = 24;\n  const top = {\n    top: 0\n  };\n  const bottom = {\n    bottom: 0\n  };\n  const right = {\n    justifyContent: 'flex-end'\n  };\n  const left = {\n    justifyContent: 'flex-start'\n  };\n  const topSpace = {\n    top: gutter\n  };\n  const bottomSpace = {\n    bottom: gutter\n  };\n  const rightSpace = {\n    right: gutter\n  };\n  const leftSpace = {\n    left: gutter\n  };\n  const center = {\n    left: '50%',\n    right: 'auto',\n    transform: 'translateX(-50%)'\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      zIndex: theme.zIndex.snackbar,\n      position: 'fixed',\n      display: 'flex',\n      left: 0,\n      right: 0,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`. */\n    anchorOriginTopCenter: _extends({}, top, {\n      [theme.breakpoints.up('md')]: _extends({}, center)\n    }),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`. */\n    anchorOriginBottomCenter: _extends({}, bottom, {\n      [theme.breakpoints.up('md')]: _extends({}, center)\n    }),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`. */\n    anchorOriginTopRight: _extends({}, top, right, {\n      [theme.breakpoints.up('md')]: _extends({\n        left: 'auto'\n      }, topSpace, rightSpace)\n    }),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`. */\n    anchorOriginBottomRight: _extends({}, bottom, right, {\n      [theme.breakpoints.up('md')]: _extends({\n        left: 'auto'\n      }, bottomSpace, rightSpace)\n    }),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`. */\n    anchorOriginTopLeft: _extends({}, top, left, {\n      [theme.breakpoints.up('md')]: _extends({\n        right: 'auto'\n      }, topSpace, leftSpace)\n    }),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`. */\n    anchorOriginBottomLeft: _extends({}, bottom, left, {\n      [theme.breakpoints.up('md')]: _extends({\n        right: 'auto'\n      }, bottomSpace, leftSpace)\n    })\n  };\n};\n/* istanbul ignore if */\n\nif (process.env.NODE_ENV !== 'production' && !React.createContext) {\n  throw new Error('Material-UI: react@16.3.0 or greater is required.');\n}\n\nclass Snackbar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.handleMouseEnter = event => {\n      if (this.props.onMouseEnter) {\n        this.props.onMouseEnter(event);\n      }\n\n      this.handlePause();\n    };\n\n    this.handleMouseLeave = event => {\n      if (this.props.onMouseLeave) {\n        this.props.onMouseLeave(event);\n      }\n\n      this.handleResume();\n    };\n\n    this.handleClickAway = event => {\n      if (this.props.onClose) {\n        this.props.onClose(event, 'clickaway');\n      }\n    };\n\n    this.handlePause = () => {\n      clearTimeout(this.timerAutoHide);\n    };\n\n    this.handleResume = () => {\n      if (this.props.autoHideDuration != null) {\n        if (this.props.resumeHideDuration != null) {\n          this.setAutoHideTimer(this.props.resumeHideDuration);\n          return;\n        }\n\n        this.setAutoHideTimer(this.props.autoHideDuration * 0.5);\n      }\n    };\n\n    this.handleExited = () => {\n      this.setState({\n        exited: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.open) {\n      this.setAutoHideTimer();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.open !== this.props.open) {\n      if (this.props.open) {\n        this.setAutoHideTimer();\n      } else {\n        clearTimeout(this.timerAutoHide);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timerAutoHide);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (typeof prevState.exited === 'undefined') {\n      return {\n        exited: !nextProps.open\n      };\n    }\n\n    if (nextProps.open) {\n      return {\n        exited: false\n      };\n    }\n\n    return null;\n  } // Timer that controls delay before snackbar auto hides\n\n\n  setAutoHideTimer(autoHideDuration) {\n    const autoHideDurationBefore = autoHideDuration != null ? autoHideDuration : this.props.autoHideDuration;\n\n    if (!this.props.onClose || autoHideDurationBefore == null) {\n      return;\n    }\n\n    clearTimeout(this.timerAutoHide);\n    this.timerAutoHide = setTimeout(() => {\n      const autoHideDurationAfter = autoHideDuration != null ? autoHideDuration : this.props.autoHideDuration;\n\n      if (!this.props.onClose || autoHideDurationAfter == null) {\n        return;\n      }\n\n      this.props.onClose(null, 'timeout');\n    }, autoHideDurationBefore);\n  }\n\n  render() {\n    const _this$props = this.props,\n          action = _this$props.action,\n          _this$props$anchorOri = _this$props.anchorOrigin,\n          vertical = _this$props$anchorOri.vertical,\n          horizontal = _this$props$anchorOri.horizontal,\n          children = _this$props.children,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          ClickAwayListenerProps = _this$props.ClickAwayListenerProps,\n          ContentProps = _this$props.ContentProps,\n          disableWindowBlurListener = _this$props.disableWindowBlurListener,\n          message = _this$props.message,\n          onEnter = _this$props.onEnter,\n          onEntered = _this$props.onEntered,\n          onEntering = _this$props.onEntering,\n          onExit = _this$props.onExit,\n          onExited = _this$props.onExited,\n          onExiting = _this$props.onExiting,\n          open = _this$props.open,\n          TransitionComponent = _this$props.TransitionComponent,\n          transitionDuration = _this$props.transitionDuration,\n          TransitionProps = _this$props.TransitionProps,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"action\", \"anchorOrigin\", \"autoHideDuration\", \"children\", \"classes\", \"className\", \"ClickAwayListenerProps\", \"ContentProps\", \"disableWindowBlurListener\", \"message\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onMouseEnter\", \"onMouseLeave\", \"open\", \"resumeHideDuration\", \"TransitionComponent\", \"transitionDuration\", \"TransitionProps\"]); // So we only render active snackbars.\n\n\n    if (!open && this.state.exited) {\n      return null;\n    }\n\n    return React.createElement(ClickAwayListener, _extends({\n      onClickAway: this.handleClickAway\n    }, ClickAwayListenerProps), React.createElement(\"div\", _extends({\n      className: classNames(classes.root, classes[\"anchorOrigin\".concat(capitalize(vertical)).concat(capitalize(horizontal))], className),\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave\n    }, other), React.createElement(EventListener, {\n      target: \"window\",\n      onFocus: disableWindowBlurListener ? undefined : this.handleResume,\n      onBlur: disableWindowBlurListener ? undefined : this.handlePause\n    }), React.createElement(TransitionComponent, _extends({\n      appear: true,\n      in: open,\n      onEnter: onEnter,\n      onEntered: onEntered,\n      onEntering: onEntering,\n      onExit: onExit,\n      onExited: createChainedFunction(this.handleExited, onExited),\n      onExiting: onExiting,\n      timeout: transitionDuration,\n      direction: vertical === 'top' ? 'down' : 'up'\n    }, TransitionProps), children || React.createElement(SnackbarContent, _extends({\n      message: message,\n      action: action\n    }, ContentProps)))));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes = {\n  /**\n   * The action to display.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The anchor of the `Snackbar`.\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'center', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['top', 'bottom']).isRequired\n  }),\n\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   */\n  autoHideDuration: PropTypes.number,\n\n  /**\n   * Replace the `SnackbarContent` component.\n   */\n  children: PropTypes.element,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Properties applied to the `ClickAwayListener` element.\n   */\n  ClickAwayListenerProps: PropTypes.object,\n\n  /**\n   * Properties applied to the [`SnackbarContent`](/api/snackbar-content/) element.\n   */\n  ContentProps: PropTypes.object,\n\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   */\n  disableWindowBlurListener: PropTypes.bool,\n\n  /**\n   * When displaying multiple consecutive Snackbars from a parent rendering a single\n   * <Snackbar/>, add the key property to ensure independent treatment of each message.\n   * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\n   * features such as autoHideDuration may be canceled.\n   */\n  key: PropTypes.any,\n\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {object} event The event source of the callback\n   * @param {string} reason Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired before the transition is entering.\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired when the transition has entered.\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired when the transition is entering.\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired before the transition is exiting.\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired when the transition has exited.\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired when the transition is exiting.\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * If true, `Snackbar` is open.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` property isn't specified, it does nothing.\n   * If `autoHideDuration` property is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n\n  /**\n   * The component used for the transition.\n   */\n  TransitionComponent: componentPropType,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * Properties applied to the `Transition` element.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nSnackbar.defaultProps = {\n  anchorOrigin: {\n    vertical: 'bottom',\n    horizontal: 'center'\n  },\n  disableWindowBlurListener: false,\n  TransitionComponent: Slide,\n  transitionDuration: {\n    enter: duration.enteringScreen,\n    exit: duration.leavingScreen\n  }\n};\nexport default withStyles(styles, {\n  flip: false,\n  name: 'MuiSnackbar'\n})(Snackbar);","map":null,"metadata":{},"sourceType":"module"}
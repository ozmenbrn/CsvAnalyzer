{"ast":null,"code":"\"use strict\";\n\nvar mkdirp = require(\"mkdirp\"),\n    fs = require(\"fs\"),\n    abs = require(\"abs\"),\n    typpy = require(\"typpy\"),\n    path = require(\"path\");\n/**\n * writeFileP\n * Create the directory structure and then create the file.\n *\n * @name writeFileP\n * @function\n * @param {String} outputPath The path to the file you want to create.\n * @param {String|Object} data The file content. If an Array/Object is provided, it will be stringified.\n * @param {Function} cb The callback function.\n */\n\n\nfunction writeFileP(outputPath, data, cb) {\n  outputPath = abs(outputPath);\n  var dirname = path.dirname(outputPath);\n  mkdirp(dirname, function (err) {\n    if (err) {\n      return cb(err);\n    }\n\n    var str = data;\n\n    if (typpy(data, Array) || typpy(data, Object)) {\n      str = JSON.stringify(data, null, 2);\n    }\n\n    fs.writeFile(outputPath, str, function (err) {\n      return cb(err, data);\n    });\n  });\n}\n/**\n * writeFileP.sync\n * The sync version of the function.\n *\n * @name writeFileP.sync\n * @function\n * @param {String} outputPath The path to the file you want to create.\n * @param {String|Object} data The file content. If an Array/Object is provided, it will be stringified.\n * @returns {String|Object} The content written in the file. If an object was provided, the stringified version will *not* be returned but the raw value.\n */\n\n\nwriteFileP.sync = function (outputPath, data) {\n  outputPath = abs(outputPath);\n  var dirname = path.dirname(outputPath);\n  mkdirp.sync(dirname);\n  var str = data;\n\n  if (typpy(data, Array) || typpy(data, Object)) {\n    str = JSON.stringify(data, null, 2);\n  }\n\n  fs.writeFileSync(outputPath, str);\n  return data;\n};\n\nmodule.exports = writeFileP;","map":null,"metadata":{},"sourceType":"script"}
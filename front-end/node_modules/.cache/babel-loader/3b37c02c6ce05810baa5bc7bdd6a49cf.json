{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport { componentPropType } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport RootRef from '../RootRef';\nimport Portal from '../Portal';\nimport { createChainedFunction } from '../utils/helpers';\nimport withStyles from '../styles/withStyles';\nimport ModalManager from './ModalManager';\nimport Backdrop from '../Backdrop';\nimport { ariaHidden } from './manageAriaHidden';\n\nfunction getContainer(container, defaultContainer) {\n  container = typeof container === 'function' ? container() : container;\n  return ReactDOM.findDOMNode(container) || defaultContainer;\n}\n\nfunction getHasTransition(props) {\n  return props.children ? props.children.props.hasOwnProperty('in') : false;\n}\n\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'fixed',\n    zIndex: theme.zIndex.modal,\n    right: 0,\n    bottom: 0,\n    top: 0,\n    left: 0\n  },\n\n  /* Styles applied to the root element if the `Modal` has exited. */\n  hidden: {\n    visibility: 'hidden'\n  }\n});\n/* istanbul ignore if */\n\nif (process.env.NODE_ENV !== 'production' && !React.createContext) {\n  throw new Error('Material-UI: react@16.3.0 or greater is required.');\n}\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * - [Dialog](/api/dialog/)\n * - [Drawer](/api/drawer/)\n * - [Menu](/api/menu/)\n * - [Popover](/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n */\n\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super();\n    this.mounted = false;\n\n    this.handleOpen = () => {\n      const doc = ownerDocument(this.mountNode);\n      const container = getContainer(this.props.container, doc.body);\n      this.props.manager.add(this, container);\n      doc.addEventListener('focus', this.enforceFocus, true);\n\n      if (this.dialogRef) {\n        this.handleOpened();\n      }\n    };\n\n    this.handleRendered = () => {\n      if (this.props.onRendered) {\n        this.props.onRendered();\n      }\n\n      if (this.props.open) {\n        this.handleOpened();\n      } else {\n        ariaHidden(this.modalRef, true);\n      }\n    };\n\n    this.handleOpened = () => {\n      this.autoFocus();\n      this.props.manager.mount(this); // Fix a bug on Chrome where the scroll isn't initially 0.\n\n      this.modalRef.scrollTop = 0;\n    };\n\n    this.handleClose = reason => {\n      const hasTransition = getHasTransition(this.props);\n      /* If the component does not have a transition or is unmounting remove the Modal\n      otherwise let the transition handle removing the style, this prevents elements\n      moving around when the Modal is closed. */\n\n      if (!(hasTransition && this.props.closeAfterTransition) || reason === 'unmount') {\n        this.props.manager.remove(this);\n      }\n\n      const doc = ownerDocument(this.mountNode);\n      doc.removeEventListener('focus', this.enforceFocus, true);\n      this.restoreLastFocus();\n    };\n\n    this.handleExited = () => {\n      if (this.props.closeAfterTransition) {\n        this.props.manager.remove(this);\n      }\n\n      this.setState({\n        exited: true\n      });\n    };\n\n    this.handleBackdropClick = event => {\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      if (this.props.onBackdropClick) {\n        this.props.onBackdropClick(event);\n      }\n\n      if (!this.props.disableBackdropClick && this.props.onClose) {\n        this.props.onClose(event, 'backdropClick');\n      }\n    };\n\n    this.handleKeyDown = event => {\n      // event.defaultPrevented:\n      //\n      // Ignore events that have been `event.preventDefault()` marked.\n      // preventDefault() is meant to stop default behaviours like\n      // clicking a checkbox to check it, hitting a button to submit a form,\n      // and hitting left arrow to move the cursor in a text input etc.\n      // Only special HTML elements have these default bahaviours.\n      //\n      // To remove in v4.\n      if (event.key !== 'Escape' || !this.isTopModal() || event.defaultPrevented) {\n        return;\n      } // Swallow the event, in case someone is listening for the escape key on the body.\n\n\n      event.stopPropagation();\n\n      if (this.props.onEscapeKeyDown) {\n        this.props.onEscapeKeyDown(event);\n      }\n\n      if (!this.props.disableEscapeKeyDown && this.props.onClose) {\n        this.props.onClose(event, 'escapeKeyDown');\n      }\n    };\n\n    this.enforceFocus = () => {\n      // The Modal might not already be mounted.\n      if (!this.isTopModal() || this.props.disableEnforceFocus || !this.mounted || !this.dialogRef) {\n        return;\n      }\n\n      const currentActiveElement = ownerDocument(this.mountNode).activeElement;\n\n      if (!this.dialogRef.contains(currentActiveElement)) {\n        this.dialogRef.focus();\n      }\n    };\n\n    this.handlePortalRef = ref => {\n      this.mountNode = ref ? ref.getMountNode() : ref;\n    };\n\n    this.handleModalRef = ref => {\n      this.modalRef = ref;\n    };\n\n    this.onRootRef = ref => {\n      this.dialogRef = ref;\n    };\n\n    this.state = {\n      exited: !props.open\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n\n    if (this.props.open) {\n      this.handleOpen();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.open && !this.props.open) {\n      this.handleClose();\n    } else if (!prevProps.open && this.props.open) {\n      this.lastFocus = ownerDocument(this.mountNode).activeElement;\n      this.handleOpen();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n\n    if (this.props.open || getHasTransition(this.props) && !this.state.exited) {\n      this.handleClose('unmount');\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.open) {\n      return {\n        exited: false\n      };\n    }\n\n    if (!getHasTransition(nextProps)) {\n      // Otherwise let handleExited take care of marking exited.\n      return {\n        exited: true\n      };\n    }\n\n    return null;\n  }\n\n  autoFocus() {\n    // We might render an empty child.\n    if (this.props.disableAutoFocus || !this.dialogRef) {\n      return;\n    }\n\n    const currentActiveElement = ownerDocument(this.mountNode).activeElement;\n\n    if (!this.dialogRef.contains(currentActiveElement)) {\n      if (!this.dialogRef.hasAttribute('tabIndex')) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, ['Material-UI: the modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n')) : void 0;\n        this.dialogRef.setAttribute('tabIndex', -1);\n      }\n\n      this.lastFocus = currentActiveElement;\n      this.dialogRef.focus();\n    }\n  }\n\n  restoreLastFocus() {\n    if (this.props.disableRestoreFocus || !this.lastFocus) {\n      return;\n    } // Not all elements in IE 11 have a focus method.\n    // Because IE 11 market share is low, we accept the restore focus being broken\n    // and we silent the issue.\n\n\n    if (this.lastFocus.focus) {\n      this.lastFocus.focus();\n    }\n\n    this.lastFocus = null;\n  }\n\n  isTopModal() {\n    return this.props.manager.isTopModal(this);\n  }\n\n  render() {\n    const _this$props = this.props,\n          BackdropComponent = _this$props.BackdropComponent,\n          BackdropProps = _this$props.BackdropProps,\n          children = _this$props.children,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          container = _this$props.container,\n          disablePortal = _this$props.disablePortal,\n          hideBackdrop = _this$props.hideBackdrop,\n          keepMounted = _this$props.keepMounted,\n          open = _this$props.open,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"BackdropComponent\", \"BackdropProps\", \"children\", \"classes\", \"className\", \"closeAfterTransition\", \"container\", \"disableAutoFocus\", \"disableBackdropClick\", \"disableEnforceFocus\", \"disableEscapeKeyDown\", \"disablePortal\", \"disableRestoreFocus\", \"hideBackdrop\", \"keepMounted\", \"manager\", \"onBackdropClick\", \"onClose\", \"onEscapeKeyDown\", \"onRendered\", \"open\"]);\n\n    const exited = this.state.exited;\n    const hasTransition = getHasTransition(this.props);\n\n    if (!keepMounted && !open && (!hasTransition || exited)) {\n      return null;\n    }\n\n    const childProps = {}; // It's a Transition like component\n\n    if (hasTransition) {\n      childProps.onExited = createChainedFunction(this.handleExited, children.props.onExited);\n    }\n\n    if (children.props.role === undefined) {\n      childProps.role = children.props.role || 'document';\n    }\n\n    if (children.props.tabIndex === undefined) {\n      childProps.tabIndex = children.props.tabIndex || '-1';\n    }\n\n    return React.createElement(Portal, {\n      ref: this.handlePortalRef,\n      container: container,\n      disablePortal: disablePortal,\n      onRendered: this.handleRendered\n    }, React.createElement(\"div\", _extends({\n      ref: this.handleModalRef,\n      onKeyDown: this.handleKeyDown,\n      role: \"presentation\",\n      className: classNames(classes.root, className, {\n        [classes.hidden]: exited\n      })\n    }, other), hideBackdrop ? null : React.createElement(BackdropComponent, _extends({\n      open: open,\n      onClick: this.handleBackdropClick\n    }, BackdropProps)), React.createElement(RootRef, {\n      rootRef: this.onRootRef\n    }, React.cloneElement(children, childProps))));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Modal.propTypes = {\n  /**\n   * A backdrop component. This property enables custom backdrop rendering.\n   */\n  BackdropComponent: componentPropType,\n\n  /**\n   * Properties applied to the [`Backdrop`](/api/backdrop/) element.\n   */\n  BackdropProps: PropTypes.object,\n\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.element,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   */\n  closeAfterTransition: PropTypes.bool,\n\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   */\n  container: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, clicking the backdrop will not fire any callback.\n   */\n  disableBackdropClick: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, hitting escape will not fire any callback.\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden.\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the backdrop is not rendered.\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Always keep the children in the DOM.\n   * This property can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   */\n  keepMounted: PropTypes.bool,\n\n  /**\n   * @ignore\n   *\n   * A modal manager used to track and manage the state of open\n   * Modals. This enables customizing how modals interact within a container.\n   */\n  manager: PropTypes.object,\n\n  /**\n   * Callback fired when the backdrop is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback\n   * @param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the escape key is pressed,\n   * `disableEscapeKeyDown` is false and the modal is in focus.\n   */\n  onEscapeKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   * It signals that the `open={true}` property took effect.\n   */\n  onRendered: PropTypes.func,\n\n  /**\n   * If `true`, the modal is open.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\nModal.defaultProps = {\n  BackdropComponent: Backdrop,\n  closeAfterTransition: false,\n  disableAutoFocus: false,\n  disableBackdropClick: false,\n  disableEnforceFocus: false,\n  disableEscapeKeyDown: false,\n  disablePortal: false,\n  disableRestoreFocus: false,\n  hideBackdrop: false,\n  keepMounted: false,\n  // Modals don't open on the server so this won't conflict with concurrent requests.\n  manager: new ModalManager()\n};\nexport default withStyles(styles, {\n  flip: false,\n  name: 'MuiModal'\n})(Modal);","map":null,"metadata":{},"sourceType":"module"}
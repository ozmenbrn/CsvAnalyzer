{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '../styles/withStyles';\nimport { capitalize } from '../utils/helpers';\nimport SwitchBase from '../internal/SwitchBase';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    width: 62,\n    position: 'relative',\n    flexShrink: 0,\n    zIndex: 0,\n    // Reset the stacking context.\n    // For correct alignment with the text.\n    verticalAlign: 'middle'\n  },\n\n  /* Styles used to create the `icon` passed to the internal `SwitchBase` component `icon` prop. */\n  icon: {\n    boxShadow: theme.shadows[1],\n    backgroundColor: 'currentColor',\n    width: 20,\n    height: 20,\n    borderRadius: '50%'\n  },\n\n  /* Styles applied the icon element component if `checked={true}`. */\n  iconChecked: {\n    boxShadow: theme.shadows[2]\n  },\n\n  /* Styles applied to the internal `SwitchBase` component's `root` class. */\n  switchBase: {\n    padding: 0,\n    height: 48,\n    width: 48,\n    color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n\n  /* Styles applied to the internal `SwitchBase` component's `checked` class. */\n  checked: {\n    transform: 'translateX(14px)',\n    '& + $bar': {\n      opacity: 0.5\n    }\n  },\n\n  /* Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`. */\n  colorPrimary: {\n    '&$checked': {\n      color: theme.palette.primary.main,\n      '& + $bar': {\n        backgroundColor: theme.palette.primary.main\n      }\n    }\n  },\n\n  /* Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    '&$checked': {\n      color: theme.palette.secondary.main,\n      '& + $bar': {\n        backgroundColor: theme.palette.secondary.main\n      }\n    }\n  },\n\n  /* Styles applied to the internal SwitchBase component's disabled class. */\n  disabled: {\n    '& + $bar': {\n      opacity: theme.palette.type === 'light' ? 0.12 : 0.1\n    },\n    '& $icon': {\n      boxShadow: theme.shadows[1]\n    },\n    '&$switchBase': {\n      color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n      '& + $bar': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    }\n  },\n\n  /* Styles applied to the bar element. */\n  bar: {\n    borderRadius: 14 / 2,\n    display: 'block',\n    position: 'absolute',\n    zIndex: -1,\n    width: 34,\n    height: 14,\n    top: '50%',\n    left: '50%',\n    marginTop: -7,\n    marginLeft: -17,\n    transition: theme.transitions.create(['opacity', 'background-color'], {\n      duration: theme.transitions.duration.shortest\n    }),\n    backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n    opacity: theme.palette.type === 'light' ? 0.38 : 0.3\n  }\n});\n\nfunction Switch(props) {\n  const classes = props.classes,\n        className = props.className,\n        color = props.color,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"color\"]);\n\n  return React.createElement(\"span\", {\n    className: classNames(classes.root, className)\n  }, React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    icon: React.createElement(\"span\", {\n      className: classes.icon\n    }),\n    classes: {\n      root: classNames(classes.switchBase, classes[\"color\".concat(capitalize(color))]),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    checkedIcon: React.createElement(\"span\", {\n      className: classNames(classes.icon, classes.iconChecked)\n    })\n  }, other)), React.createElement(\"span\", {\n    className: classes.bar\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Attributes applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.checked`.\n   * @param {boolean} checked The `checked` value of the switch\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The input component property `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool])\n} : void 0;\nSwitch.defaultProps = {\n  color: 'secondary'\n};\nexport default withStyles(styles, {\n  name: 'MuiSwitch'\n})(Switch);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\"; // @inheritedComponent Transition\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport EventListener from 'react-event-listener';\nimport debounce from 'debounce'; // < 1kb payload overhead when lodash/debounce is > 3kb.\n\nimport Transition from 'react-transition-group/Transition';\nimport ownerWindow from '../utils/ownerWindow';\nimport withTheme from '../styles/withTheme';\nimport { duration } from '../styles/transitions';\nimport { reflow, getTransitionProps } from '../transitions/utils';\nconst GUTTER = 24; // Translate the node so he can't be seen on the screen.\n// Later, we gonna translate back the node to his original location\n// with `translate3d(0, 0, 0)`.`\n\nfunction getTranslateValue(props, node) {\n  const direction = props.direction;\n  const rect = node.getBoundingClientRect();\n  let transform;\n\n  if (node.fakeTransform) {\n    transform = node.fakeTransform;\n  } else {\n    const computedStyle = ownerWindow(node).getComputedStyle(node);\n    transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');\n  }\n\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (transform && transform !== 'none' && typeof transform === 'string') {\n    const transformValues = transform.split('(')[1].split(')')[0].split(',');\n    offsetX = parseInt(transformValues[4], 10);\n    offsetY = parseInt(transformValues[5], 10);\n  }\n\n  if (direction === 'left') {\n    return \"translateX(100vw) translateX(-\".concat(rect.left - offsetX, \"px)\");\n  }\n\n  if (direction === 'right') {\n    return \"translateX(-\".concat(rect.left + rect.width + GUTTER - offsetX, \"px)\");\n  }\n\n  if (direction === 'up') {\n    return \"translateY(100vh) translateY(-\".concat(rect.top - offsetY, \"px)\");\n  } // direction === 'down'\n\n\n  return \"translateY(-\".concat(rect.top + rect.height + GUTTER - offsetY, \"px)\");\n}\n\nexport function setTranslateValue(props, node) {\n  const transform = getTranslateValue(props, node);\n\n  if (transform) {\n    node.style.webkitTransform = transform;\n    node.style.transform = transform;\n  }\n}\n/**\n * The Slide transition is used by the [Snackbar](/demos/snackbars/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nclass Slide extends React.Component {\n  constructor() {\n    super();\n    this.mounted = false;\n\n    this.handleEnter = node => {\n      setTranslateValue(this.props, node);\n      reflow(node);\n\n      if (this.props.onEnter) {\n        this.props.onEnter(node);\n      }\n    };\n\n    this.handleEntering = node => {\n      const theme = this.props.theme;\n      const transitionProps = getTransitionProps(this.props, {\n        mode: 'enter'\n      });\n      node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends({}, transitionProps, {\n        easing: theme.transitions.easing.easeOut\n      }));\n      node.style.transition = theme.transitions.create('transform', _extends({}, transitionProps, {\n        easing: theme.transitions.easing.easeOut\n      }));\n      node.style.webkitTransform = 'translate(0, 0)';\n      node.style.transform = 'translate(0, 0)';\n\n      if (this.props.onEntering) {\n        this.props.onEntering(node);\n      }\n    };\n\n    this.handleExit = node => {\n      const theme = this.props.theme;\n      const transitionProps = getTransitionProps(this.props, {\n        mode: 'exit'\n      });\n      node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends({}, transitionProps, {\n        easing: theme.transitions.easing.sharp\n      }));\n      node.style.transition = theme.transitions.create('transform', _extends({}, transitionProps, {\n        easing: theme.transitions.easing.sharp\n      }));\n      setTranslateValue(this.props, node);\n\n      if (this.props.onExit) {\n        this.props.onExit(node);\n      }\n    };\n\n    this.handleExited = node => {\n      // No need for transitions when the component is hidden\n      node.style.webkitTransition = '';\n      node.style.transition = '';\n\n      if (this.props.onExited) {\n        this.props.onExited(node);\n      }\n    };\n\n    if (typeof window !== 'undefined') {\n      this.handleResize = debounce(() => {\n        // Skip configuration where the position is screen size invariant.\n        if (this.props.in || this.props.direction === 'down' || this.props.direction === 'right') {\n          return;\n        }\n\n        if (this.transitionRef) {\n          setTranslateValue(this.props, this.transitionRef);\n        }\n      }, 166); // Corresponds to 10 frames at 60 Hz.\n    }\n  }\n\n  componentDidMount() {\n    this.mounted = true; // state.mounted handle SSR, once the component is mounted, we need\n    // to properly hide it.\n\n    if (!this.props.in) {\n      // We need to set initial translate values of transition element\n      // otherwise component will be shown when in=false.\n      this.updatePosition();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.direction !== this.props.direction && !this.props.in) {\n      // We need to update the position of the drawer when the direction change and\n      // when it's hidden.\n      this.updatePosition();\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleResize.clear();\n  }\n\n  updatePosition() {\n    if (this.transitionRef) {\n      this.transitionRef.style.visibility = 'inherit';\n      setTranslateValue(this.props, this.transitionRef);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          styleProp = _this$props.style,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"direction\", \"onEnter\", \"onEntering\", \"onExit\", \"onExited\", \"style\", \"theme\"]);\n\n    let style = {}; // We use this state to handle the server-side rendering.\n    // We don't know the width of the children ahead of time.\n    // We need to render it.\n\n    if (!this.props.in && !this.mounted) {\n      style.visibility = 'hidden';\n    }\n\n    style = _extends({}, style, styleProp, React.isValidElement(children) ? children.props.style : {});\n    return React.createElement(EventListener, {\n      target: \"window\",\n      onResize: this.handleResize\n    }, React.createElement(Transition, _extends({\n      onEnter: this.handleEnter,\n      onEntering: this.handleEntering,\n      onExit: this.handleExit,\n      onExited: this.handleExited,\n      appear: true,\n      style: style,\n      ref: ref => {\n        this.transitionRef = ReactDOM.findDOMNode(ref);\n      }\n    }, other), children));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Slide.propTypes = {\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  /**\n   * Direction the child node will enter from.\n   */\n  direction: PropTypes.oneOf(['left', 'right', 'up', 'down']),\n\n  /**\n   * If `true`, show the component; triggers the enter or exit animation.\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })])\n} : void 0;\nSlide.defaultProps = {\n  direction: 'down',\n  timeout: {\n    enter: duration.enteringScreen,\n    exit: duration.leavingScreen\n  }\n};\nexport default withTheme()(Slide);","map":null,"metadata":{},"sourceType":"module"}
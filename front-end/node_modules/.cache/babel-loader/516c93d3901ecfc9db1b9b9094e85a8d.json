{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n    padding: '24px 24px 20px',\n    flex: '0 0 auto'\n  }\n};\n\nfunction DialogTitle(props) {\n  const children = props.children,\n        classes = props.classes,\n        className = props.className,\n        disableTypography = props.disableTypography,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"disableTypography\"]);\n\n  return React.createElement(\"div\", _extends({\n    className: classNames(classes.root, className)\n  }, other), disableTypography ? children : React.createElement(Typography, {\n    variant: \"title\",\n    internalDeprecatedVariant: true\n  }, children));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the children won't be wrapped by a typography component.\n   * For instance, this can be useful to render an h4 instead of the default h2.\n   */\n  disableTypography: PropTypes.bool\n} : void 0;\nDialogTitle.defaultProps = {\n  disableTypography: false\n};\nexport default withStyles(styles, {\n  name: 'MuiDialogTitle'\n})(DialogTitle);","map":null,"metadata":{},"sourceType":"module"}
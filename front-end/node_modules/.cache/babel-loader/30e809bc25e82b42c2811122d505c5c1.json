{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { componentPropType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { capitalize } from '../utils/helpers';\nconst RADIUS = 10;\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'relative',\n    display: 'inline-flex',\n    // For correct alignment with the text.\n    verticalAlign: 'middle'\n  },\n\n  /* Styles applied to the badge `span` element. */\n  badge: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    boxSizing: 'border-box',\n    fontFamily: theme.typography.fontFamily,\n    fontWeight: theme.typography.fontWeightMedium,\n    fontSize: theme.typography.pxToRem(12),\n    minWidth: RADIUS * 2,\n    padding: '0 4px',\n    height: RADIUS * 2,\n    borderRadius: RADIUS,\n    backgroundColor: theme.palette.color,\n    color: theme.palette.textColor,\n    zIndex: 1,\n    // Render the badge on top of potential ripples.\n    transform: 'scale(1) translate(50%, -50%)',\n    transformOrigin: '100% 0%',\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    backgroundColor: theme.palette.secondary.main,\n    color: theme.palette.secondary.contrastText\n  },\n\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText\n  },\n\n  /* Styles applied to the badge `span` element if `invisible={true}`. */\n  invisible: {\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    transform: 'scale(0) translate(50%, -50%)',\n    transformOrigin: '100% 0%'\n  },\n\n  /* Styles applied to the root element if `variant=\"dot\"`. */\n  dot: {\n    height: 6,\n    minWidth: 6,\n    padding: 0\n  }\n});\n\nfunction Badge(props) {\n  const badgeContent = props.badgeContent,\n        children = props.children,\n        classes = props.classes,\n        className = props.className,\n        color = props.color,\n        ComponentProp = props.component,\n        invisibleProp = props.invisible,\n        showZero = props.showZero,\n        max = props.max,\n        variant = props.variant,\n        other = _objectWithoutPropertiesLoose(props, [\"badgeContent\", \"children\", \"classes\", \"className\", \"color\", \"component\", \"invisible\", \"showZero\", \"max\", \"variant\"]);\n\n  let invisible = invisibleProp;\n\n  if (invisibleProp == null && Number(badgeContent) === 0 && !showZero) {\n    invisible = true;\n  }\n\n  const badgeClassName = classNames(classes.badge, {\n    [classes[\"color\".concat(capitalize(color))]]: color !== 'default',\n    [classes.invisible]: invisible,\n    [classes.dot]: variant === 'dot'\n  });\n  let displayValue = '';\n\n  if (variant !== 'dot') {\n    displayValue = badgeContent > max ? \"\".concat(max, \"+\") : badgeContent;\n  }\n\n  return React.createElement(ComponentProp, _extends({\n    className: classNames(classes.root, className)\n  }, other), children, React.createElement(\"span\", {\n    className: badgeClassName\n  }, displayValue));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Badge.propTypes = {\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: componentPropType,\n\n  /**\n   * If `true`, the badge will be invisible.\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * Max count to show.\n   */\n  max: PropTypes.number,\n\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   */\n  showZero: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'dot'])\n} : void 0;\nBadge.defaultProps = {\n  color: 'default',\n  component: 'span',\n  max: 99,\n  showZero: false,\n  variant: 'standard'\n};\nexport default withStyles(styles, {\n  name: 'MuiBadge'\n})(Badge);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent Transition\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Transition from 'react-transition-group/Transition';\nimport withTheme from '../styles/withTheme';\nimport { reflow, getTransitionProps } from '../transitions/utils';\n\nfunction getScale(value) {\n  return \"scale(\".concat(value, \", \").concat(value ** 2, \")\");\n}\n\nconst styles = {\n  entering: {\n    opacity: 1,\n    transform: getScale(1)\n  },\n  entered: {\n    opacity: 1,\n    // Use translateZ to scrolling issue on Chrome.\n    transform: \"\".concat(getScale(1), \" translateZ(0)\")\n  }\n};\n/**\n * The Grow transition is used by the [Tooltip](/demos/tooltips/) and\n * [Popover](/utils/popover/) components.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nclass Grow extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleEnter = node => {\n      const _this$props2 = this.props,\n            theme = _this$props2.theme,\n            timeout = _this$props2.timeout;\n      reflow(node); // So the animation always start from the start.\n\n      const _getTransitionProps = getTransitionProps(this.props, {\n        mode: 'enter'\n      }),\n            transitionDuration = _getTransitionProps.duration,\n            delay = _getTransitionProps.delay;\n\n      let duration = 0;\n\n      if (timeout === 'auto') {\n        duration = theme.transitions.getAutoHeightDuration(node.clientHeight);\n        this.autoTimeout = duration;\n      } else {\n        duration = transitionDuration;\n      }\n\n      node.style.transition = [theme.transitions.create('opacity', {\n        duration,\n        delay\n      }), theme.transitions.create('transform', {\n        duration: duration * 0.666,\n        delay\n      })].join(',');\n\n      if (this.props.onEnter) {\n        this.props.onEnter(node);\n      }\n    };\n\n    this.handleExit = node => {\n      const _this$props3 = this.props,\n            theme = _this$props3.theme,\n            timeout = _this$props3.timeout;\n      let duration = 0;\n\n      const _getTransitionProps2 = getTransitionProps(this.props, {\n        mode: 'exit'\n      }),\n            transitionDuration = _getTransitionProps2.duration,\n            delay = _getTransitionProps2.delay;\n\n      if (timeout === 'auto') {\n        duration = theme.transitions.getAutoHeightDuration(node.clientHeight);\n        this.autoTimeout = duration;\n      } else {\n        duration = transitionDuration;\n      }\n\n      node.style.transition = [theme.transitions.create('opacity', {\n        duration,\n        delay\n      }), theme.transitions.create('transform', {\n        duration: duration * 0.666,\n        delay: delay || duration * 0.333\n      })].join(',');\n      node.style.opacity = '0';\n      node.style.transform = getScale(0.75);\n\n      if (this.props.onExit) {\n        this.props.onExit(node);\n      }\n    };\n\n    this.addEndListener = (_, next) => {\n      if (this.props.timeout === 'auto') {\n        this.timer = setTimeout(next, this.autoTimeout || 0);\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          styleProp = _this$props.style,\n          timeout = _this$props.timeout,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"onEnter\", \"onExit\", \"style\", \"theme\", \"timeout\"]);\n\n    const style = _extends({}, styleProp, React.isValidElement(children) ? children.props.style : {});\n\n    return React.createElement(Transition, _extends({\n      appear: true,\n      onEnter: this.handleEnter,\n      onExit: this.handleExit,\n      addEndListener: this.addEndListener,\n      timeout: timeout === 'auto' ? null : timeout\n    }, other), (state, childProps) => React.cloneElement(children, _extends({\n      style: _extends({\n        opacity: 0,\n        transform: getScale(0.75)\n      }, styles[state], style)\n    }, childProps)));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Grow.propTypes = {\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  /**\n   * If `true`, show the component; triggers the enter or exit animation.\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   */\n  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  }), PropTypes.oneOf(['auto'])])\n} : void 0;\nGrow.defaultProps = {\n  timeout: 'auto'\n};\nGrow.muiSupportAuto = true;\nexport default withTheme()(Grow);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent Paper\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '../styles/withStyles';\nimport Paper from '../Paper';\nimport { capitalize } from '../utils/helpers';\nimport LinearProgress from '../LinearProgress';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    background: theme.palette.background.default,\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `position=\"bottom\"`. */\n  positionBottom: {\n    position: 'fixed',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: theme.zIndex.mobileStepper\n  },\n\n  /* Styles applied to the root element if `position=\"top\"`. */\n  positionTop: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    zIndex: theme.zIndex.mobileStepper\n  },\n\n  /* Styles applied to the root element if `position=\"static\"`. */\n  positionStatic: {},\n\n  /* Styles applied to the dots container if `variant=\"dots\"`. */\n  dots: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n\n  /* Styles applied to each dot if `variant=\"dots\"`. */\n  dot: {\n    backgroundColor: theme.palette.action.disabled,\n    borderRadius: '50%',\n    width: 8,\n    height: 8,\n    margin: '0 2px'\n  },\n\n  /* Styles applied to a dot if `variant=\"dots\"` and this is the active step. */\n  dotActive: {\n    backgroundColor: theme.palette.primary.main\n  },\n\n  /* Styles applied to the Linear Progress component if `variant=\"progress\"`. */\n  progress: {\n    width: '50%'\n  }\n});\n\nfunction MobileStepper(props) {\n  const activeStep = props.activeStep,\n        backButton = props.backButton,\n        classes = props.classes,\n        classNameProp = props.className,\n        LinearProgressProps = props.LinearProgressProps,\n        nextButton = props.nextButton,\n        position = props.position,\n        steps = props.steps,\n        variant = props.variant,\n        other = _objectWithoutPropertiesLoose(props, [\"activeStep\", \"backButton\", \"classes\", \"className\", \"LinearProgressProps\", \"nextButton\", \"position\", \"steps\", \"variant\"]);\n\n  const className = classNames(classes.root, classes[\"position\".concat(capitalize(position))], classNameProp);\n  return React.createElement(Paper, _extends({\n    square: true,\n    elevation: 0,\n    className: className\n  }, other), backButton, variant === 'dots' && React.createElement(\"div\", {\n    className: classes.dots\n  }, [...new Array(steps)].map((_, step) => {\n    const dotClassName = classNames(classes.dot, {\n      [classes.dotActive]: step === activeStep\n    }); // eslint-disable-next-line react/no-array-index-key\n\n    return React.createElement(\"div\", {\n      key: step,\n      className: dotClassName\n    });\n  })), variant === 'progress' && React.createElement(LinearProgress, _extends({\n    className: classes.progress,\n    variant: \"determinate\",\n    value: Math.ceil(activeStep / (steps - 1) * 100)\n  }, LinearProgressProps)), nextButton);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? MobileStepper.propTypes = {\n  /**\n   * Set the active step (zero based index).\n   * Defines which dot is highlighted when the variant is 'dots'.\n   */\n  activeStep: PropTypes.number,\n\n  /**\n   * A back button element. For instance, it can be a `Button` or an `IconButton`.\n   */\n  backButton: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Properties applied to the `LinearProgress` element.\n   */\n  LinearProgressProps: PropTypes.object,\n\n  /**\n   * A next button element. For instance, it can be a `Button` or an `IconButton`.\n   */\n  nextButton: PropTypes.node,\n\n  /**\n   * Set the positioning type.\n   */\n  position: PropTypes.oneOf(['bottom', 'top', 'static']),\n\n  /**\n   * The total steps.\n   */\n  steps: PropTypes.number.isRequired,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['text', 'dots', 'progress'])\n} : void 0;\nMobileStepper.defaultProps = {\n  activeStep: 0,\n  position: 'bottom',\n  variant: 'dots'\n};\nexport default withStyles(styles, {\n  name: 'MuiMobileStepper'\n})(MobileStepper);","map":null,"metadata":{},"sourceType":"module"}
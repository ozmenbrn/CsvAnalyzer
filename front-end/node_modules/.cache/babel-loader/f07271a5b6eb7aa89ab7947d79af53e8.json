{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Modal from '../Modal';\nimport withStyles from '../styles/withStyles';\nimport Slide from '../Slide';\nimport Paper from '../Paper';\nimport { capitalize } from '../utils/helpers';\nimport { duration } from '../styles/transitions';\nconst oppositeDirection = {\n  left: 'right',\n  right: 'left',\n  top: 'down',\n  bottom: 'up'\n};\nexport function isHorizontal(props) {\n  return ['left', 'right'].indexOf(props.anchor) !== -1;\n}\nexport function getAnchor(props) {\n  return props.theme.direction === 'rtl' && isHorizontal(props) ? oppositeDirection[props.anchor] : props.anchor;\n}\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `variant=\"permanent or persistent\"`. */\n  docked: {\n    flex: '0 0 auto'\n  },\n\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    overflowY: 'auto',\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    flex: '1 0 auto',\n    zIndex: theme.zIndex.drawer,\n    WebkitOverflowScrolling: 'touch',\n    // Add iOS momentum scrolling.\n    // temporary style\n    position: 'fixed',\n    top: 0,\n    // We disable the focus ring for mouse, touch and keyboard users.\n    // At some point, it would be better to keep it for keyboard users.\n    // :focus-ring CSS pseudo-class will help.\n    outline: 'none'\n  },\n\n  /* Styles applied to the `Paper` component if `anchor=\"left\"`. */\n  paperAnchorLeft: {\n    left: 0,\n    right: 'auto'\n  },\n\n  /* Styles applied to the `Paper` component if `anchor=\"right\"`. */\n  paperAnchorRight: {\n    left: 'auto',\n    right: 0\n  },\n\n  /* Styles applied to the `Paper` component if `anchor=\"top\"`. */\n  paperAnchorTop: {\n    top: 0,\n    left: 0,\n    bottom: 'auto',\n    right: 0,\n    height: 'auto',\n    maxHeight: '100%'\n  },\n\n  /* Styles applied to the `Paper` component if `anchor=\"bottom\"`. */\n  paperAnchorBottom: {\n    top: 'auto',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 'auto',\n    maxHeight: '100%'\n  },\n\n  /* Styles applied to the `Paper` component if `anchor=\"left\"` & `variant` is not \"temporary\". */\n  paperAnchorDockedLeft: {\n    borderRight: \"1px solid \".concat(theme.palette.divider)\n  },\n\n  /* Styles applied to the `Paper` component if `anchor=\"top\"` & `variant` is not \"temporary\". */\n  paperAnchorDockedTop: {\n    borderBottom: \"1px solid \".concat(theme.palette.divider)\n  },\n\n  /* Styles applied to the `Paper` component if `anchor=\"right\"` & `variant` is not \"temporary\". */\n  paperAnchorDockedRight: {\n    borderLeft: \"1px solid \".concat(theme.palette.divider)\n  },\n\n  /* Styles applied to the `Paper` component if `anchor=\"bottom\"` & `variant` is not \"temporary\". */\n  paperAnchorDockedBottom: {\n    borderTop: \"1px solid \".concat(theme.palette.divider)\n  },\n\n  /* Styles applied to the `Modal` component. */\n  modal: {}\n});\n/**\n * The properties of the [Modal](/api/modal/) component are available\n * when `variant=\"temporary\"` is set.\n */\n\nclass Drawer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.mounted = false;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  render() {\n    const _this$props = this.props,\n          BackdropProps = _this$props.BackdropProps,\n          children = _this$props.children,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          elevation = _this$props.elevation,\n          _this$props$ModalProp = _this$props.ModalProps,\n          _this$props$ModalProp2 = _this$props$ModalProp === void 0 ? {} : _this$props$ModalProp,\n          BackdropPropsProp = _this$props$ModalProp2.BackdropProps,\n          onClose = _this$props.onClose,\n          open = _this$props.open,\n          PaperProps = _this$props.PaperProps,\n          SlideProps = _this$props.SlideProps,\n          transitionDuration = _this$props.transitionDuration,\n          variant = _this$props.variant,\n          ModalProps = _objectWithoutPropertiesLoose(_this$props.ModalProps, [\"BackdropProps\"]),\n          other = _objectWithoutPropertiesLoose(_this$props, [\"anchor\", \"BackdropProps\", \"children\", \"classes\", \"className\", \"elevation\", \"ModalProps\", \"onClose\", \"open\", \"PaperProps\", \"SlideProps\", \"theme\", \"transitionDuration\", \"variant\"]);\n\n    const anchor = getAnchor(this.props);\n    const drawer = React.createElement(Paper, _extends({\n      elevation: variant === 'temporary' ? elevation : 0,\n      square: true,\n      className: classNames(classes.paper, classes[\"paperAnchor\".concat(capitalize(anchor))], {\n        [classes[\"paperAnchorDocked\".concat(capitalize(anchor))]]: variant !== 'temporary'\n      })\n    }, PaperProps), children);\n\n    if (variant === 'permanent') {\n      return React.createElement(\"div\", _extends({\n        className: classNames(classes.root, classes.docked, className)\n      }, other), drawer);\n    }\n\n    const slidingDrawer = React.createElement(Slide, _extends({\n      in: open,\n      direction: oppositeDirection[anchor],\n      timeout: transitionDuration,\n      appear: this.mounted\n    }, SlideProps), drawer);\n\n    if (variant === 'persistent') {\n      return React.createElement(\"div\", _extends({\n        className: classNames(classes.root, classes.docked, className)\n      }, other), slidingDrawer);\n    } // variant === temporary\n\n\n    return React.createElement(Modal, _extends({\n      BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {\n        transitionDuration\n      }),\n      className: classNames(classes.root, classes.modal, className),\n      open: open,\n      onClose: onClose\n    }, other, ModalProps), slidingDrawer);\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Drawer.propTypes = {\n  /**\n   * Side from which the drawer will appear.\n   */\n  anchor: PropTypes.oneOf(['left', 'top', 'right', 'bottom']),\n\n  /**\n   * @ignore\n   */\n  BackdropProps: PropTypes.object,\n\n  /**\n   * The contents of the drawer.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The elevation of the drawer.\n   */\n  elevation: PropTypes.number,\n\n  /**\n   * Properties applied to the [`Modal`](/api/modal/) element.\n   */\n  ModalProps: PropTypes.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * If `true`, the drawer is open.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Properties applied to the [`Paper`](/api/paper/) element.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Properties applied to the [`Slide`](/api/slide/) element.\n   */\n  SlideProps: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nDrawer.defaultProps = {\n  anchor: 'left',\n  elevation: 16,\n  open: false,\n  transitionDuration: {\n    enter: duration.enteringScreen,\n    exit: duration.leavingScreen\n  },\n  variant: 'temporary' // Mobile first.\n\n};\nexport default withStyles(styles, {\n  name: 'MuiDrawer',\n  flip: false,\n  withTheme: true\n})(Drawer);","map":null,"metadata":{},"sourceType":"module"}
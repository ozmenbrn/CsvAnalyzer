{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { componentPropType, chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    height: 1,\n    margin: 0,\n    // Reset browser default style.\n    border: 'none',\n    flexShrink: 0,\n    backgroundColor: theme.palette.divider\n  },\n\n  /* Styles applied to the root element if `absolute={true}`. */\n  absolute: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    width: '100%'\n  },\n\n  /* Styles applied to the root element if `variant=\"inset\"`. */\n  inset: {\n    marginLeft: 72\n  },\n\n  /* Styles applied to the root element if `light={true}`. */\n  light: {\n    backgroundColor: fade(theme.palette.divider, 0.08)\n  },\n\n  /* Styles applied to the root element if `variant=\"middle\"`. */\n  middle: {\n    marginLeft: theme.spacing.unit * 2,\n    marginRight: theme.spacing.unit * 2\n  }\n});\n\nfunction Divider(props) {\n  const absolute = props.absolute,\n        classes = props.classes,\n        className = props.className,\n        Component = props.component,\n        inset = props.inset,\n        light = props.light,\n        variant = props.variant,\n        other = _objectWithoutPropertiesLoose(props, [\"absolute\", \"classes\", \"className\", \"component\", \"inset\", \"light\", \"variant\"]);\n\n  return React.createElement(Component, _extends({\n    className: classNames(classes.root, {\n      [classes.inset]: inset || variant === 'inset',\n      [classes.middle]: variant === 'middle',\n      [classes.absolute]: absolute,\n      [classes.light]: light\n    }, className)\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Divider.propTypes = {\n  /**\n   * Absolutely position the element.\n   */\n  absolute: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: componentPropType,\n\n  /**\n   * If `true`, the divider will be indented.\n   * __WARNING__: `inset` is deprecated.\n   * Instead use `variant=\"inset\"`.\n   */\n  inset: chainPropTypes(PropTypes.bool, props => {\n    /* istanbul ignore if */\n    if (props.inset) {\n      return new Error('Material-UI: you are using the deprecated `inset` property ' + 'that will be removed in the next major release. The property `variant=\"inset\"` ' + 'is equivalent and should be used instead.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the divider will have a lighter color.\n   */\n  light: PropTypes.bool,\n\n  /**\n   *  The variant to use.\n   */\n  variant: PropTypes.oneOf(['fullWidth', 'inset', 'middle'])\n} : void 0;\nDivider.defaultProps = {\n  absolute: false,\n  component: 'hr',\n  light: false,\n  variant: 'fullWidth'\n};\nexport default withStyles(styles, {\n  name: 'MuiDivider'\n})(Divider);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { componentPropType } from '@material-ui/utils';\nimport warning from 'warning';\nimport withStyles from '../styles/withStyles';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    height: 56,\n    backgroundColor: theme.palette.background.paper\n  }\n});\n\nfunction BottomNavigation(props) {\n  const childrenProp = props.children,\n        classes = props.classes,\n        classNameProp = props.className,\n        Component = props.component,\n        onChange = props.onChange,\n        showLabels = props.showLabels,\n        value = props.value,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"component\", \"onChange\", \"showLabels\", \"value\"]);\n\n  const className = classNames(classes.root, classNameProp);\n  const children = React.Children.map(childrenProp, (child, childIndex) => {\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(child.type !== React.Fragment, [\"Material-UI: the BottomNavigation component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n')) : void 0;\n    const childValue = child.props.value === undefined ? childIndex : child.props.value;\n    return React.cloneElement(child, {\n      selected: childValue === value,\n      showLabel: child.props.showLabel !== undefined ? child.props.showLabel : showLabels,\n      value: childValue,\n      onChange\n    });\n  });\n  return React.createElement(Component, _extends({\n    className: className\n  }, other), children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? BottomNavigation.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: componentPropType,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback\n   * @param {any} value We default to the index of the child\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, all `BottomNavigationAction`s will show their labels.\n   * By default, only the selected `BottomNavigationAction` will show its label.\n   */\n  showLabels: PropTypes.bool,\n\n  /**\n   * The value of the currently selected `BottomNavigationAction`.\n   */\n  value: PropTypes.any\n} : void 0;\nBottomNavigation.defaultProps = {\n  component: 'div',\n  showLabels: false\n};\nexport default withStyles(styles, {\n  name: 'MuiBottomNavigation'\n})(BottomNavigation);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent Transition\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Transition from 'react-transition-group/Transition';\nimport { duration } from '../styles/transitions';\nimport withTheme from '../styles/withTheme';\nimport { reflow, getTransitionProps } from '../transitions/utils';\nconst styles = {\n  entering: {\n    opacity: 1\n  },\n  entered: {\n    opacity: 1\n  }\n};\n/**\n * The Fade transition is used by the [Modal](/utils/modal/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nclass Fade extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleEnter = node => {\n      const theme = this.props.theme;\n      reflow(node); // So the animation always start from the start.\n\n      const transitionProps = getTransitionProps(this.props, {\n        mode: 'enter'\n      });\n      node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);\n      node.style.transition = theme.transitions.create('opacity', transitionProps);\n\n      if (this.props.onEnter) {\n        this.props.onEnter(node);\n      }\n    };\n\n    this.handleExit = node => {\n      const theme = this.props.theme;\n      const transitionProps = getTransitionProps(this.props, {\n        mode: 'exit'\n      });\n      node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);\n      node.style.transition = theme.transitions.create('opacity', transitionProps);\n\n      if (this.props.onExit) {\n        this.props.onExit(node);\n      }\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          styleProp = _this$props.style,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"onEnter\", \"onExit\", \"style\", \"theme\"]);\n\n    const style = _extends({}, styleProp, React.isValidElement(children) ? children.props.style : {});\n\n    return React.createElement(Transition, _extends({\n      appear: true,\n      onEnter: this.handleEnter,\n      onExit: this.handleExit\n    }, other), (state, childProps) => React.cloneElement(children, _extends({\n      style: _extends({\n        opacity: 0\n      }, styles[state], style)\n    }, childProps)));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Fade.propTypes = {\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  /**\n   * If `true`, the component will transition in.\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })])\n} : void 0;\nFade.defaultProps = {\n  timeout: {\n    enter: duration.enteringScreen,\n    exit: duration.leavingScreen\n  }\n};\nexport default withTheme()(Fade);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyboardArrowLeft from '../internal/svg-icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '../internal/svg-icons/KeyboardArrowRight';\nimport withTheme from '../styles/withTheme';\nimport IconButton from '../IconButton';\n/**\n * @ignore - internal component.\n */\n\nvar _ref = React.createElement(KeyboardArrowRight, null);\n\nvar _ref2 = React.createElement(KeyboardArrowLeft, null);\n\nvar _ref3 = React.createElement(KeyboardArrowLeft, null);\n\nvar _ref4 = React.createElement(KeyboardArrowRight, null);\n\nclass TablePaginationActions extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleBackButtonClick = event => {\n      this.props.onChangePage(event, this.props.page - 1);\n    };\n\n    this.handleNextButtonClick = event => {\n      this.props.onChangePage(event, this.props.page + 1);\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          backIconButtonProps = _this$props.backIconButtonProps,\n          count = _this$props.count,\n          nextIconButtonProps = _this$props.nextIconButtonProps,\n          page = _this$props.page,\n          rowsPerPage = _this$props.rowsPerPage,\n          theme = _this$props.theme,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"backIconButtonProps\", \"count\", \"nextIconButtonProps\", \"onChangePage\", \"page\", \"rowsPerPage\", \"theme\"]);\n\n    return React.createElement(\"div\", other, React.createElement(IconButton, _extends({\n      onClick: this.handleBackButtonClick,\n      disabled: page === 0,\n      color: \"inherit\"\n    }, backIconButtonProps), theme.direction === 'rtl' ? _ref : _ref2), React.createElement(IconButton, _extends({\n      onClick: this.handleNextButtonClick,\n      disabled: page >= Math.ceil(count / rowsPerPage) - 1,\n      color: \"inherit\"\n    }, nextIconButtonProps), theme.direction === 'rtl' ? _ref3 : _ref4));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? TablePaginationActions.propTypes = {\n  /**\n   * Properties applied to the back arrow [`IconButton`](/api/icon-button/) element.\n   */\n  backIconButtonProps: PropTypes.object,\n\n  /**\n   * The total number of rows.\n   */\n  count: PropTypes.number.isRequired,\n\n  /**\n   * Properties applied to the next arrow [`IconButton`](/api/icon-button/) element.\n   */\n  nextIconButtonProps: PropTypes.object,\n\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {object} event The event source of the callback\n   * @param {number} page The page selected\n   */\n  onChangePage: PropTypes.func.isRequired,\n\n  /**\n   * The zero-based index of the current page.\n   */\n  page: PropTypes.number.isRequired,\n\n  /**\n   * The number of rows per page.\n   */\n  rowsPerPage: PropTypes.number.isRequired,\n\n  /**\n   * @ignore\n   */\n  theme: PropTypes.object.isRequired\n} : void 0;\nexport default withTheme()(TablePaginationActions);","map":null,"metadata":{},"sourceType":"module"}
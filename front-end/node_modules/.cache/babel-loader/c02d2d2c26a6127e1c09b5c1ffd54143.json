{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport PopperJS from 'popper.js';\nimport Portal from '../Portal';\n\nfunction flipPlacement(placement) {\n  const direction = typeof window !== 'undefined' && document.body.getAttribute('dir') || 'ltr';\n\n  if (direction !== 'rtl') {\n    return placement;\n  }\n\n  switch (placement) {\n    case 'bottom-end':\n      return 'bottom-start';\n\n    case 'bottom-start':\n      return 'bottom-end';\n\n    case 'top-end':\n      return 'top-start';\n\n    case 'top-start':\n      return 'top-end';\n\n    default:\n      return placement;\n  }\n}\n\nfunction getAnchorEl(anchorEl) {\n  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;\n}\n/**\n * Poppers rely on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.\n */\n\n\nclass Popper extends React.Component {\n  constructor(props) {\n    super();\n\n    this.handleOpen = () => {\n      const _this$props2 = this.props,\n            anchorEl = _this$props2.anchorEl,\n            modifiers = _this$props2.modifiers,\n            open = _this$props2.open,\n            placement = _this$props2.placement,\n            _this$props2$popperOp = _this$props2.popperOptions,\n            popperOptions = _this$props2$popperOp === void 0 ? {} : _this$props2$popperOp,\n            disablePortal = _this$props2.disablePortal;\n      const popperNode = ReactDOM.findDOMNode(this);\n\n      if (!popperNode || !anchorEl || !open) {\n        return;\n      }\n\n      if (this.popper) {\n        this.popper.destroy();\n        this.popper = null;\n      }\n\n      this.popper = new PopperJS(getAnchorEl(anchorEl), popperNode, _extends({\n        placement: flipPlacement(placement)\n      }, popperOptions, {\n        modifiers: _extends({}, disablePortal ? {} : {\n          // It's using scrollParent by default, we can use the viewport when using a portal.\n          preventOverflow: {\n            boundariesElement: 'window'\n          }\n        }, modifiers, popperOptions.modifiers),\n        // We could have been using a custom modifier like react-popper is doing.\n        // But it seems this is the best public API for this use case.\n        onCreate: this.handlePopperUpdate,\n        onUpdate: this.handlePopperUpdate\n      }));\n    };\n\n    this.handlePopperUpdate = data => {\n      if (data.placement !== this.state.placement) {\n        this.setState({\n          placement: data.placement\n        });\n      }\n    };\n\n    this.handleExited = () => {\n      this.setState({\n        exited: true\n      });\n      this.handleClose();\n    };\n\n    this.handleClose = () => {\n      if (!this.popper) {\n        return;\n      }\n\n      this.popper.destroy();\n      this.popper = null;\n    };\n\n    this.state = {\n      exited: !props.open\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.open !== this.props.open && !this.props.open && !this.props.transition) {\n      // Otherwise handleExited will call this.\n      this.handleClose();\n    } // Let's update the popper position.\n\n\n    if (prevProps.open !== this.props.open || prevProps.anchorEl !== this.props.anchorEl || prevProps.popperOptions !== this.props.popperOptions || prevProps.modifiers !== this.props.modifiers || prevProps.disablePortal !== this.props.disablePortal || prevProps.placement !== this.props.placement) {\n      this.handleOpen();\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleClose();\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.open) {\n      return {\n        exited: false\n      };\n    }\n\n    if (!nextProps.transition) {\n      // Otherwise let handleExited take care of marking exited.\n      return {\n        exited: true\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          container = _this$props.container,\n          disablePortal = _this$props.disablePortal,\n          keepMounted = _this$props.keepMounted,\n          open = _this$props.open,\n          placementProps = _this$props.placement,\n          transition = _this$props.transition,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"anchorEl\", \"children\", \"container\", \"disablePortal\", \"keepMounted\", \"modifiers\", \"open\", \"placement\", \"popperOptions\", \"transition\"]);\n\n    const _this$state = this.state,\n          exited = _this$state.exited,\n          placement = _this$state.placement;\n\n    if (!keepMounted && !open && (!transition || exited)) {\n      return null;\n    }\n\n    const childProps = {\n      placement: placement || flipPlacement(placementProps)\n    };\n\n    if (transition) {\n      childProps.TransitionProps = {\n        in: open,\n        onExited: this.handleExited\n      };\n    }\n\n    return React.createElement(Portal, {\n      onRendered: this.handleOpen,\n      disablePortal: disablePortal,\n      container: container\n    }, React.createElement(\"div\", _extends({\n      role: \"tooltip\",\n      style: {\n        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.\n        position: 'absolute'\n      }\n    }, other), typeof children === 'function' ? children(childProps) : children));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Popper.propTypes = {\n  /**\n   * This is the DOM element, or a function that returns the DOM element,\n   * that may be used to set the position of the popover.\n   * The return value will passed as the reference object of the Popper\n   * instance.\n   */\n  anchorEl: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * Popper render function or node.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will passed to the Modal component.\n   * By default, it uses the body of the anchorEl's top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Always keep the children in the DOM.\n   * This property can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Popper.\n   */\n  keepMounted: PropTypes.bool,\n\n  /**\n   * Popper.js is based on a \"plugin-like\" architecture,\n   * most of its features are fully encapsulated \"modifiers\".\n   *\n   * A modifier is a function that is called each time Popper.js needs to\n   * compute the position of the popper.\n   * For this reason, modifiers should be very performant to avoid bottlenecks.\n   * To learn how to create a modifier, [read the modifiers documentation](https://github.com/FezVrasta/popper.js/blob/master/docs/_includes/popper-documentation.md#modifiers--object).\n   */\n  modifiers: PropTypes.object,\n\n  /**\n   * If `true`, the popper is visible.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * Popper placement.\n   */\n  placement: PropTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),\n\n  /**\n   * Options provided to the [`popper.js`](https://github.com/FezVrasta/popper.js) instance.\n   */\n  popperOptions: PropTypes.object,\n\n  /**\n   * Help supporting a react-transition-group/Transition component.\n   */\n  transition: PropTypes.bool\n} : void 0;\nPopper.defaultProps = {\n  disablePortal: false,\n  placement: 'bottom',\n  transition: false\n};\nexport default Popper;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent Transition\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Transition from 'react-transition-group/Transition';\nimport { componentPropType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { duration } from '../styles/transitions';\nimport { getTransitionProps } from '../transitions/utils';\nexport const styles = theme => ({\n  /* Styles applied to the container element. */\n  container: {\n    height: 0,\n    overflow: 'hidden',\n    transition: theme.transitions.create('height')\n  },\n\n  /* Styles applied to the container element when the transition has entered. */\n  entered: {\n    height: 'auto',\n    overflow: 'visible'\n  },\n\n  /* Styles applied to the outer wrapper element. */\n  wrapper: {\n    // Hack to get children with a negative margin to not falsify the height computation.\n    display: 'flex'\n  },\n\n  /* Styles applied to the inner wrapper element. */\n  wrapperInner: {\n    width: '100%'\n  }\n});\n/**\n * The Collapse transition is used by the\n * [Vertical Stepper](/demos/steppers/#vertical-stepper) StepContent component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nclass Collapse extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleEnter = node => {\n      node.style.height = this.props.collapsedHeight;\n\n      if (this.props.onEnter) {\n        this.props.onEnter(node);\n      }\n    };\n\n    this.handleEntering = node => {\n      const _this$props2 = this.props,\n            timeout = _this$props2.timeout,\n            theme = _this$props2.theme;\n      const wrapperHeight = this.wrapperRef ? this.wrapperRef.clientHeight : 0;\n\n      const _getTransitionProps = getTransitionProps(this.props, {\n        mode: 'enter'\n      }),\n            transitionDuration = _getTransitionProps.duration;\n\n      if (timeout === 'auto') {\n        const duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);\n        node.style.transitionDuration = \"\".concat(duration2, \"ms\");\n        this.autoTransitionDuration = duration2;\n      } else {\n        node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : \"\".concat(transitionDuration, \"ms\");\n      }\n\n      node.style.height = \"\".concat(wrapperHeight, \"px\");\n\n      if (this.props.onEntering) {\n        this.props.onEntering(node);\n      }\n    };\n\n    this.handleEntered = node => {\n      node.style.height = 'auto';\n\n      if (this.props.onEntered) {\n        this.props.onEntered(node);\n      }\n    };\n\n    this.handleExit = node => {\n      const wrapperHeight = this.wrapperRef ? this.wrapperRef.clientHeight : 0;\n      node.style.height = \"\".concat(wrapperHeight, \"px\");\n\n      if (this.props.onExit) {\n        this.props.onExit(node);\n      }\n    };\n\n    this.handleExiting = node => {\n      const _this$props3 = this.props,\n            timeout = _this$props3.timeout,\n            theme = _this$props3.theme;\n      const wrapperHeight = this.wrapperRef ? this.wrapperRef.clientHeight : 0;\n\n      const _getTransitionProps2 = getTransitionProps(this.props, {\n        mode: 'exit'\n      }),\n            transitionDuration = _getTransitionProps2.duration;\n\n      if (timeout === 'auto') {\n        const duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);\n        node.style.transitionDuration = \"\".concat(duration2, \"ms\");\n        this.autoTransitionDuration = duration2;\n      } else {\n        node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : \"\".concat(transitionDuration, \"ms\");\n      }\n\n      node.style.height = this.props.collapsedHeight;\n\n      if (this.props.onExiting) {\n        this.props.onExiting(node);\n      }\n    };\n\n    this.addEndListener = (_, next) => {\n      if (this.props.timeout === 'auto') {\n        this.timer = setTimeout(next, this.autoTransitionDuration || 0);\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          collapsedHeight = _this$props.collapsedHeight,\n          Component = _this$props.component,\n          style = _this$props.style,\n          timeout = _this$props.timeout,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"classes\", \"className\", \"collapsedHeight\", \"component\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExiting\", \"style\", \"theme\", \"timeout\"]);\n\n    return React.createElement(Transition, _extends({\n      onEnter: this.handleEnter,\n      onEntered: this.handleEntered,\n      onEntering: this.handleEntering,\n      onExit: this.handleExit,\n      onExiting: this.handleExiting,\n      addEndListener: this.addEndListener,\n      timeout: timeout === 'auto' ? null : timeout\n    }, other), (state, childProps) => React.createElement(Component, _extends({\n      className: classNames(classes.container, {\n        [classes.entered]: state === 'entered'\n      }, className),\n      style: _extends({}, style, {\n        minHeight: collapsedHeight\n      })\n    }, childProps), React.createElement(\"div\", {\n      className: classes.wrapper,\n      ref: ref => {\n        this.wrapperRef = ref;\n      }\n    }, React.createElement(\"div\", {\n      className: classes.wrapperInner\n    }, children))));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Collapse.propTypes = {\n  /**\n   * The content node to be collapsed.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The height of the container when collapsed.\n   */\n  collapsedHeight: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: componentPropType,\n\n  /**\n   * If `true`, the component will transition in.\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   */\n  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  }), PropTypes.oneOf(['auto'])])\n} : void 0;\nCollapse.defaultProps = {\n  collapsedHeight: '0px',\n  component: 'div',\n  timeout: duration.standard\n};\nCollapse.muiSupportAuto = true;\nexport default withStyles(styles, {\n  withTheme: true,\n  name: 'MuiCollapse'\n})(Collapse);","map":null,"metadata":{},"sourceType":"module"}
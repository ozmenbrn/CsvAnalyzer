{"ast":null,"code":"import css from 'dom-helpers/style';\nimport getScrollbarSize from 'dom-helpers/util/scrollbarSize';\nimport ownerDocument from '../utils/ownerDocument';\nimport isOverflowing from './isOverflowing';\nimport { ariaHidden, ariaHiddenSiblings } from './manageAriaHidden';\n\nfunction findIndexOf(data, callback) {\n  let idx = -1;\n  data.some((item, index) => {\n    if (callback(item)) {\n      idx = index;\n      return true;\n    }\n\n    return false;\n  });\n  return idx;\n}\n\nfunction getPaddingRight(node) {\n  return parseInt(css(node, 'paddingRight') || 0, 10);\n}\n\nfunction setContainerStyle(data) {\n  // We are only interested in the actual `style` here because we will override it.\n  data.style = {\n    overflow: data.container.style.overflow,\n    paddingRight: data.container.style.paddingRight\n  };\n  const style = {\n    overflow: 'hidden'\n  };\n\n  if (data.overflowing) {\n    const scrollbarSize = getScrollbarSize(); // Use computed style, here to get the real padding to add our scrollbar width.\n\n    style.paddingRight = \"\".concat(getPaddingRight(data.container) + scrollbarSize, \"px\"); // .mui-fixed is a global helper.\n\n    const fixedNodes = ownerDocument(data.container).querySelectorAll('.mui-fixed');\n\n    for (let i = 0; i < fixedNodes.length; i += 1) {\n      const paddingRight = getPaddingRight(fixedNodes[i]);\n      data.prevPaddings.push(paddingRight);\n      fixedNodes[i].style.paddingRight = \"\".concat(paddingRight + scrollbarSize, \"px\");\n    }\n  }\n\n  Object.keys(style).forEach(key => {\n    data.container.style[key] = style[key];\n  });\n}\n\nfunction removeContainerStyle(data) {\n  // The modal might be closed before it had the chance to be mounted in the DOM.\n  if (data.style) {\n    Object.keys(data.style).forEach(key => {\n      data.container.style[key] = data.style[key];\n    });\n  }\n\n  const fixedNodes = ownerDocument(data.container).querySelectorAll('.mui-fixed');\n\n  for (let i = 0; i < fixedNodes.length; i += 1) {\n    fixedNodes[i].style.paddingRight = \"\".concat(data.prevPaddings[i], \"px\");\n  }\n}\n/**\n * @ignore - do not document.\n *\n * Proper state management for containers and the modals in those containers.\n * Simplified, but inspired by react-overlay's ModalManager class.\n * Used by the Modal to ensure proper styling of containers.\n */\n\n\nclass ModalManager {\n  constructor(options = {}) {\n    const _options$hideSiblingN = options.hideSiblingNodes,\n          hideSiblingNodes = _options$hideSiblingN === void 0 ? true : _options$hideSiblingN,\n          _options$handleContai = options.handleContainerOverflow,\n          handleContainerOverflow = _options$handleContai === void 0 ? true : _options$handleContai;\n    this.hideSiblingNodes = hideSiblingNodes;\n    this.handleContainerOverflow = handleContainerOverflow; // this.modals[modalIdx] = modal\n\n    this.modals = []; // this.data[containerIdx] = {\n    //   modals: [],\n    //   container,\n    //   overflowing,\n    //   prevPaddings,\n    // }\n\n    this.data = [];\n  }\n\n  add(modal, container) {\n    let modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n\n    modalIdx = this.modals.length;\n    this.modals.push(modal); // If the modal we are adding is already in the DOM.\n\n    if (modal.modalRef) {\n      ariaHidden(modal.modalRef, false);\n    }\n\n    if (this.hideSiblingNodes) {\n      ariaHiddenSiblings(container, modal.mountNode, modal.modalRef, true);\n    }\n\n    const containerIdx = findIndexOf(this.data, item => item.container === container);\n\n    if (containerIdx !== -1) {\n      this.data[containerIdx].modals.push(modal);\n      return modalIdx;\n    }\n\n    const data = {\n      modals: [modal],\n      container,\n      overflowing: isOverflowing(container),\n      prevPaddings: []\n    };\n    this.data.push(data);\n    return modalIdx;\n  }\n\n  mount(modal) {\n    const containerIdx = findIndexOf(this.data, item => item.modals.indexOf(modal) !== -1);\n    const data = this.data[containerIdx];\n\n    if (!data.style && this.handleContainerOverflow) {\n      setContainerStyle(data);\n    }\n  }\n\n  remove(modal) {\n    const modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx === -1) {\n      return modalIdx;\n    }\n\n    const containerIdx = findIndexOf(this.data, item => item.modals.indexOf(modal) !== -1);\n    const data = this.data[containerIdx];\n    data.modals.splice(data.modals.indexOf(modal), 1);\n    this.modals.splice(modalIdx, 1); // If that was the last modal in a container, clean up the container.\n\n    if (data.modals.length === 0) {\n      if (this.handleContainerOverflow) {\n        removeContainerStyle(data);\n      } // In case the modal wasn't in the DOM yet.\n\n\n      if (modal.modalRef) {\n        ariaHidden(modal.modalRef, true);\n      }\n\n      if (this.hideSiblingNodes) {\n        ariaHiddenSiblings(data.container, modal.mountNode, modal.modalRef, false);\n      }\n\n      this.data.splice(containerIdx, 1);\n    } else if (this.hideSiblingNodes) {\n      // Otherwise make sure the next top modal is visible to a screen reader.\n      const nextTop = data.modals[data.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set\n      // aria-hidden because the dom element doesn't exist either\n      // when modal was unmounted before modalRef gets null\n\n      if (nextTop.modalRef) {\n        ariaHidden(nextTop.modalRef, false);\n      }\n    }\n\n    return modalIdx;\n  }\n\n  isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  }\n\n}\n\nexport default ModalManager;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent ButtonBase\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { componentPropType } from '@material-ui/utils';\nimport ArrowDownwardIcon from '../internal/svg-icons/ArrowDownward';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport { capitalize } from '../utils/helpers';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    cursor: 'pointer',\n    display: 'inline-flex',\n    justifyContent: 'flex-start',\n    flexDirection: 'inherit',\n    alignItems: 'center',\n    '&:hover': {\n      color: theme.palette.text.primary\n    },\n    '&:focus': {\n      color: theme.palette.text.primary\n    }\n  },\n\n  /* Styles applied to the root element if `active={true}`. */\n  active: {\n    color: theme.palette.text.primary,\n    '& $icon': {\n      opacity: 1\n    }\n  },\n\n  /* Styles applied to the icon component. */\n  icon: {\n    height: 16,\n    marginRight: 4,\n    marginLeft: 4,\n    opacity: 0,\n    transition: theme.transitions.create(['opacity', 'transform'], {\n      duration: theme.transitions.duration.shorter\n    }),\n    userSelect: 'none',\n    width: 16\n  },\n\n  /* Styles applied to the icon component if `direction=\"desc\"`. */\n  iconDirectionDesc: {\n    transform: 'rotate(0deg)'\n  },\n\n  /* Styles applied to the icon component if `direction=\"asc\"`. */\n  iconDirectionAsc: {\n    transform: 'rotate(180deg)'\n  }\n});\n/**\n * A button based label for placing inside `TableCell` for column sorting.\n */\n\nfunction TableSortLabel(props) {\n  const active = props.active,\n        children = props.children,\n        classes = props.classes,\n        className = props.className,\n        direction = props.direction,\n        hideSortIcon = props.hideSortIcon,\n        IconComponent = props.IconComponent,\n        other = _objectWithoutPropertiesLoose(props, [\"active\", \"children\", \"classes\", \"className\", \"direction\", \"hideSortIcon\", \"IconComponent\"]);\n\n  return React.createElement(ButtonBase, _extends({\n    className: classNames(classes.root, {\n      [classes.active]: active\n    }, className),\n    component: \"span\",\n    disableRipple: true\n  }, other), children, hideSortIcon && !active ? null : React.createElement(IconComponent, {\n    className: classNames(classes.icon, classes[\"iconDirection\".concat(capitalize(direction))])\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? TableSortLabel.propTypes = {\n  /**\n   * If `true`, the label will have the active styling (should be true for the sorted column).\n   */\n  active: PropTypes.bool,\n\n  /**\n   * Label contents, the arrow will be appended automatically.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The current sort direction.\n   */\n  direction: PropTypes.oneOf(['asc', 'desc']),\n\n  /**\n   * Hide sort icon when active is false.\n   */\n  hideSortIcon: PropTypes.bool,\n\n  /**\n   * Sort icon to use.\n   */\n  IconComponent: componentPropType\n} : void 0;\nTableSortLabel.defaultProps = {\n  active: false,\n  direction: 'desc',\n  hideSortIcon: false,\n  IconComponent: ArrowDownwardIcon\n};\nexport default withStyles(styles, {\n  name: 'MuiTableSortLabel'\n})(TableSortLabel);","map":null,"metadata":{},"sourceType":"module"}
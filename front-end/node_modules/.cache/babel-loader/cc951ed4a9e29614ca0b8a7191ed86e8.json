{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent TableCell\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { componentPropType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport InputBase from '../InputBase';\nimport MenuItem from '../MenuItem';\nimport Select from '../Select';\nimport TableCell from '../TableCell';\nimport Toolbar from '../Toolbar';\nimport Typography from '../Typography';\nimport TablePaginationActions from './TablePaginationActions';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.secondary,\n    fontSize: theme.typography.pxToRem(12),\n    // Increase the specificity to override TableCell.\n    '&:last-child': {\n      padding: 0\n    }\n  },\n\n  /* Styles applied to the Toolbar component. */\n  toolbar: {\n    height: 56,\n    minHeight: 56,\n    paddingRight: 2\n  },\n\n  /* Styles applied to the spacer element. */\n  spacer: {\n    flex: '1 1 100%'\n  },\n\n  /* Styles applied to the caption Typography components if `variant=\"caption\"`. */\n  caption: {\n    flexShrink: 0\n  },\n\n  /* Styles applied to the Select component `root` class. */\n  selectRoot: {\n    marginRight: 32,\n    marginLeft: 8\n  },\n\n  /* Styles applied to the Select component `select` class. */\n  select: {\n    paddingLeft: 8,\n    paddingRight: 16\n  },\n\n  /* Styles applied to the Select component `icon` class. */\n  selectIcon: {\n    top: 1\n  },\n\n  /* Styles applied to the `InputBase` component. */\n  input: {\n    color: 'inherit',\n    fontSize: 'inherit',\n    flexShrink: 0\n  },\n\n  /* Styles applied to the MenuItem component. */\n  menuItem: {},\n\n  /* Styles applied to the internal `TablePaginationActions` component. */\n  actions: {\n    flexShrink: 0,\n    marginLeft: 20\n  }\n});\n/**\n * A `TableCell` based component for placing inside `TableFooter` for pagination.\n */\n\nclass TablePagination extends React.Component {\n  // This logic would be better handled on userside.\n  // However, we have it just in case.\n  componentDidUpdate() {\n    const _this$props2 = this.props,\n          count = _this$props2.count,\n          onChangePage = _this$props2.onChangePage,\n          page = _this$props2.page,\n          rowsPerPage = _this$props2.rowsPerPage;\n    const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n\n    if (page > newLastPage) {\n      onChangePage(null, newLastPage);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          ActionsComponent = _this$props.ActionsComponent,\n          backIconButtonProps = _this$props.backIconButtonProps,\n          classes = _this$props.classes,\n          colSpanProp = _this$props.colSpan,\n          Component = _this$props.component,\n          count = _this$props.count,\n          labelDisplayedRows = _this$props.labelDisplayedRows,\n          labelRowsPerPage = _this$props.labelRowsPerPage,\n          nextIconButtonProps = _this$props.nextIconButtonProps,\n          onChangePage = _this$props.onChangePage,\n          onChangeRowsPerPage = _this$props.onChangeRowsPerPage,\n          page = _this$props.page,\n          rowsPerPage = _this$props.rowsPerPage,\n          rowsPerPageOptions = _this$props.rowsPerPageOptions,\n          _this$props$SelectPro = _this$props.SelectProps,\n          SelectProps = _this$props$SelectPro === void 0 ? {} : _this$props$SelectPro,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"ActionsComponent\", \"backIconButtonProps\", \"classes\", \"colSpan\", \"component\", \"count\", \"labelDisplayedRows\", \"labelRowsPerPage\", \"nextIconButtonProps\", \"onChangePage\", \"onChangeRowsPerPage\", \"page\", \"rowsPerPage\", \"rowsPerPageOptions\", \"SelectProps\"]);\n\n    let colSpan;\n\n    if (Component === TableCell || Component === 'td') {\n      colSpan = colSpanProp || 1000; // col-span over everything\n    }\n\n    const MenuItemComponent = SelectProps.native ? 'option' : MenuItem;\n    return React.createElement(Component, _extends({\n      className: classes.root,\n      colSpan: colSpan\n    }, other), React.createElement(Toolbar, {\n      className: classes.toolbar\n    }, React.createElement(\"div\", {\n      className: classes.spacer\n    }), rowsPerPageOptions.length > 1 && React.createElement(Typography, {\n      color: \"inherit\",\n      variant: \"caption\",\n      className: classes.caption\n    }, labelRowsPerPage), rowsPerPageOptions.length > 1 && React.createElement(Select, _extends({\n      classes: {\n        root: classes.selectRoot,\n        select: classes.select,\n        icon: classes.selectIcon\n      },\n      input: React.createElement(InputBase, {\n        className: classes.input\n      }),\n      value: rowsPerPage,\n      onChange: onChangeRowsPerPage\n    }, SelectProps), rowsPerPageOptions.map(rowsPerPageOption => React.createElement(MenuItemComponent, {\n      className: classes.menuItem,\n      key: rowsPerPageOption,\n      value: rowsPerPageOption\n    }, rowsPerPageOption))), React.createElement(Typography, {\n      color: \"inherit\",\n      variant: \"caption\",\n      className: classes.caption\n    }, labelDisplayedRows({\n      from: count === 0 ? 0 : page * rowsPerPage + 1,\n      to: Math.min(count, (page + 1) * rowsPerPage),\n      count,\n      page\n    })), React.createElement(ActionsComponent, {\n      className: classes.actions,\n      backIconButtonProps: backIconButtonProps,\n      count: count,\n      nextIconButtonProps: nextIconButtonProps,\n      onChangePage: onChangePage,\n      page: page,\n      rowsPerPage: rowsPerPage\n    })));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? TablePagination.propTypes = {\n  /**\n   * The component used for displaying the actions.\n   * Either a string to use a DOM element or a component.\n   */\n  ActionsComponent: componentPropType,\n\n  /**\n   * Properties applied to the back arrow [`IconButton`](/api/icon-button/) component.\n   */\n  backIconButtonProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  colSpan: PropTypes.number,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: componentPropType,\n\n  /**\n   * The total number of rows.\n   */\n  count: PropTypes.number.isRequired,\n\n  /**\n   * Customize the displayed rows label.\n   */\n  labelDisplayedRows: PropTypes.func,\n\n  /**\n   * Customize the rows per page label. Invoked with a `{ from, to, count, page }`\n   * object.\n   */\n  labelRowsPerPage: PropTypes.node,\n\n  /**\n   * Properties applied to the next arrow [`IconButton`](/api/icon-button/) element.\n   */\n  nextIconButtonProps: PropTypes.object,\n\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {object} event The event source of the callback\n   * @param {number} page The page selected\n   */\n  onChangePage: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the number of rows per page is changed.\n   *\n   * @param {object} event The event source of the callback\n   */\n  onChangeRowsPerPage: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   */\n  page: PropTypes.number.isRequired,\n\n  /**\n   * The number of rows per page.\n   */\n  rowsPerPage: PropTypes.number.isRequired,\n\n  /**\n   * Customizes the options of the rows per page select field. If less than two options are\n   * available, no select field will be displayed.\n   */\n  rowsPerPageOptions: PropTypes.array,\n\n  /**\n   * Properties applied to the rows per page [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object\n} : void 0;\nTablePagination.defaultProps = {\n  ActionsComponent: TablePaginationActions,\n  component: TableCell,\n  labelDisplayedRows: ({\n    from,\n    to,\n    count\n  }) => \"\".concat(from, \"-\").concat(to, \" of \").concat(count),\n  labelRowsPerPage: 'Rows per page:',\n  rowsPerPageOptions: [10, 25, 50, 100]\n};\nexport default withStyles(styles, {\n  name: 'MuiTablePagination'\n})(TablePagination);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/* eslint-disable no-restricted-globals */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport classNames from 'classnames';\nimport EventListener from 'react-event-listener';\nimport debounce from 'debounce'; // < 1kb payload overhead when lodash/debounce is > 3kb.\n\nimport { getNormalizedScrollLeft, detectScrollType } from 'normalize-scroll-left';\nimport { componentPropType } from '@material-ui/utils';\nimport animate from '../internal/animate';\nimport ScrollbarSize from './ScrollbarSize';\nimport withStyles from '../styles/withStyles';\nimport TabIndicator from './TabIndicator';\nimport TabScrollButton from './TabScrollButton';\nimport deprecatedPropType from '../utils/deprecatedPropType';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden',\n    minHeight: 48,\n    WebkitOverflowScrolling: 'touch' // Add iOS momentum scrolling.\n\n  },\n\n  /* Styles applied to the flex container element. */\n  flexContainer: {\n    display: 'flex'\n  },\n\n  /* Styles applied to the flex container element if `centered={true}` & `!variant=\"scrollable\"`. */\n  centered: {\n    justifyContent: 'center'\n  },\n\n  /* Styles applied to the tablist element. */\n  scroller: {\n    position: 'relative',\n    display: 'inline-block',\n    flex: '1 1 auto',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the tablist element if `!variant=\"scrollable\"`\b\b\b. */\n  fixed: {\n    overflowX: 'hidden',\n    width: '100%'\n  },\n\n  /* Styles applied to the tablist element if `variant=\"scrollable\"`. */\n  scrollable: {\n    overflowX: 'scroll'\n  },\n\n  /* Styles applied to the `ScrollButtonComponent` component. */\n  scrollButtons: {},\n\n  /* Styles applied to the `ScrollButtonComponent` component if `scrollButtons=\"auto\"`. */\n  scrollButtonsAuto: {\n    [theme.breakpoints.down('xs')]: {\n      display: 'none'\n    }\n  },\n\n  /* Styles applied to the `TabIndicator` component. */\n  indicator: {}\n});\n\nclass Tabs extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      indicatorStyle: {},\n      scrollerStyle: {\n        marginBottom: 0\n      },\n      showLeftScroll: false,\n      showRightScroll: false,\n      mounted: false\n    };\n\n    this.getConditionalElements = () => {\n      const _this$props2 = this.props,\n            classes = _this$props2.classes,\n            deprecatedScrollable = _this$props2.scrollable,\n            ScrollButtonComponent = _this$props2.ScrollButtonComponent,\n            scrollButtons = _this$props2.scrollButtons,\n            theme = _this$props2.theme,\n            variant = _this$props2.variant;\n      const conditionalElements = {};\n      const scrollable = variant === 'scrollable' || deprecatedScrollable;\n      conditionalElements.scrollbarSizeListener = scrollable ? React.createElement(ScrollbarSize, {\n        onChange: this.handleScrollbarSizeChange\n      }) : null;\n      const showScrollButtons = scrollable && (scrollButtons === 'auto' || scrollButtons === 'on');\n      conditionalElements.scrollButtonLeft = showScrollButtons ? React.createElement(ScrollButtonComponent, {\n        direction: theme && theme.direction === 'rtl' ? 'right' : 'left',\n        onClick: this.handleLeftScrollClick,\n        visible: this.state.showLeftScroll,\n        className: classNames(classes.scrollButtons, {\n          [classes.scrollButtonsAuto]: scrollButtons === 'auto'\n        })\n      }) : null;\n      conditionalElements.scrollButtonRight = showScrollButtons ? React.createElement(ScrollButtonComponent, {\n        direction: theme && theme.direction === 'rtl' ? 'left' : 'right',\n        onClick: this.handleRightScrollClick,\n        visible: this.state.showRightScroll,\n        className: classNames(classes.scrollButtons, {\n          [classes.scrollButtonsAuto]: scrollButtons === 'auto'\n        })\n      }) : null;\n      return conditionalElements;\n    };\n\n    this.getTabsMeta = (value, direction) => {\n      let tabsMeta;\n\n      if (this.tabsRef) {\n        const rect = this.tabsRef.getBoundingClientRect(); // create a new object with ClientRect class props + scrollLeft\n\n        tabsMeta = {\n          clientWidth: this.tabsRef.clientWidth,\n          scrollLeft: this.tabsRef.scrollLeft,\n          scrollLeftNormalized: getNormalizedScrollLeft(this.tabsRef, direction),\n          scrollWidth: this.tabsRef.scrollWidth,\n          left: rect.left,\n          right: rect.right\n        };\n      }\n\n      let tabMeta;\n\n      if (this.tabsRef && value !== false) {\n        const children = this.tabsRef.children[0].children;\n\n        if (children.length > 0) {\n          const tab = children[this.valueToIndex.get(value)];\n          process.env.NODE_ENV !== \"production\" ? warning(tab, [\"Material-UI: the value provided `\".concat(value, \"` to the Tabs component is invalid.\"), 'None of the Tabs children have this value.', this.valueToIndex.keys ? \"You can provide one of the following values: \".concat(Array.from(this.valueToIndex.keys()).join(', '), \".\") : null].join('\\n')) : void 0;\n          tabMeta = tab ? tab.getBoundingClientRect() : null;\n        }\n      }\n\n      return {\n        tabsMeta,\n        tabMeta\n      };\n    };\n\n    this.handleLeftScrollClick = () => {\n      this.moveTabsScroll(-this.tabsRef.clientWidth);\n    };\n\n    this.handleRightScrollClick = () => {\n      this.moveTabsScroll(this.tabsRef.clientWidth);\n    };\n\n    this.handleScrollbarSizeChange = scrollbarHeight => {\n      this.setState({\n        scrollerStyle: {\n          marginBottom: -scrollbarHeight\n        }\n      });\n    };\n\n    this.moveTabsScroll = delta => {\n      const theme = this.props.theme;\n      const multiplier = theme.direction === 'rtl' ? -1 : 1;\n      const nextScrollLeft = this.tabsRef.scrollLeft + delta * multiplier; // Fix for Edge\n\n      const invert = theme.direction === 'rtl' && detectScrollType() === 'reverse' ? -1 : 1;\n      this.scroll(invert * nextScrollLeft);\n    };\n\n    this.scrollSelectedIntoView = () => {\n      const _this$props3 = this.props,\n            theme = _this$props3.theme,\n            value = _this$props3.value;\n\n      const _this$getTabsMeta = this.getTabsMeta(value, theme.direction),\n            tabsMeta = _this$getTabsMeta.tabsMeta,\n            tabMeta = _this$getTabsMeta.tabMeta;\n\n      if (!tabMeta || !tabsMeta) {\n        return;\n      }\n\n      if (tabMeta.left < tabsMeta.left) {\n        // left side of button is out of view\n        const nextScrollLeft = tabsMeta.scrollLeft + (tabMeta.left - tabsMeta.left);\n        this.scroll(nextScrollLeft);\n      } else if (tabMeta.right > tabsMeta.right) {\n        // right side of button is out of view\n        const nextScrollLeft = tabsMeta.scrollLeft + (tabMeta.right - tabsMeta.right);\n        this.scroll(nextScrollLeft);\n      }\n    };\n\n    this.scroll = value => {\n      animate('scrollLeft', this.tabsRef, value);\n    };\n\n    this.updateScrollButtonState = () => {\n      const _this$props4 = this.props,\n            deprecatedScrollable = _this$props4.scrollable,\n            scrollButtons = _this$props4.scrollButtons,\n            theme = _this$props4.theme,\n            variant = _this$props4.variant;\n      const scrollable = variant === 'scrollable' || deprecatedScrollable;\n\n      if (scrollable && scrollButtons !== 'off') {\n        const _this$tabsRef = this.tabsRef,\n              scrollWidth = _this$tabsRef.scrollWidth,\n              clientWidth = _this$tabsRef.clientWidth;\n        const scrollLeft = getNormalizedScrollLeft(this.tabsRef, theme.direction);\n        const showLeftScroll = theme.direction === 'rtl' ? scrollWidth > clientWidth + scrollLeft : scrollLeft > 0;\n        const showRightScroll = theme.direction === 'rtl' ? scrollLeft > 0 : scrollWidth > clientWidth + scrollLeft;\n\n        if (showLeftScroll !== this.state.showLeftScroll || showRightScroll !== this.state.showRightScroll) {\n          this.setState({\n            showLeftScroll,\n            showRightScroll\n          });\n        }\n      }\n    };\n\n    if (typeof window !== 'undefined') {\n      this.handleResize = debounce(() => {\n        this.updateIndicatorState(this.props);\n        this.updateScrollButtonState();\n      }, 166); // Corresponds to 10 frames at 60 Hz.\n\n      this.handleTabsScroll = debounce(() => {\n        this.updateScrollButtonState();\n      }, 166); // Corresponds to 10 frames at 60 Hz.\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      mounted: true\n    });\n    this.updateIndicatorState(this.props);\n    this.updateScrollButtonState();\n\n    if (this.props.action) {\n      this.props.action({\n        updateIndicator: this.handleResize\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // The index might have changed at the same time.\n    // We need to check again the right indicator position.\n    this.updateIndicatorState(this.props);\n    this.updateScrollButtonState();\n\n    if (this.state.indicatorStyle !== prevState.indicatorStyle) {\n      this.scrollSelectedIntoView();\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleResize.clear();\n    this.handleTabsScroll.clear();\n  }\n\n  updateIndicatorState(props) {\n    const theme = props.theme,\n          value = props.value;\n\n    const _this$getTabsMeta2 = this.getTabsMeta(value, theme.direction),\n          tabsMeta = _this$getTabsMeta2.tabsMeta,\n          tabMeta = _this$getTabsMeta2.tabMeta;\n\n    let left = 0;\n\n    if (tabMeta && tabsMeta) {\n      const correction = theme.direction === 'rtl' ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;\n      left = Math.round(tabMeta.left - tabsMeta.left + correction);\n    }\n\n    const indicatorStyle = {\n      left,\n      // May be wrong until the font is loaded.\n      width: tabMeta ? Math.round(tabMeta.width) : 0\n    };\n\n    if ((indicatorStyle.left !== this.state.indicatorStyle.left || indicatorStyle.width !== this.state.indicatorStyle.width) && !isNaN(indicatorStyle.left) && !isNaN(indicatorStyle.width)) {\n      this.setState({\n        indicatorStyle\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          centered = _this$props.centered,\n          childrenProp = _this$props.children,\n          classes = _this$props.classes,\n          classNameProp = _this$props.className,\n          Component = _this$props.component,\n          _this$props$fullWidth = _this$props.fullWidth,\n          fullWidth = _this$props$fullWidth === void 0 ? false : _this$props$fullWidth,\n          indicatorColor = _this$props.indicatorColor,\n          onChange = _this$props.onChange,\n          _this$props$scrollabl = _this$props.scrollable,\n          deprecatedScrollable = _this$props$scrollabl === void 0 ? false : _this$props$scrollabl,\n          _this$props$TabIndica = _this$props.TabIndicatorProps,\n          TabIndicatorProps = _this$props$TabIndica === void 0 ? {} : _this$props$TabIndica,\n          textColor = _this$props.textColor,\n          value = _this$props.value,\n          variant = _this$props.variant,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"action\", \"centered\", \"children\", \"classes\", \"className\", \"component\", \"fullWidth\", \"indicatorColor\", \"onChange\", \"scrollable\", \"ScrollButtonComponent\", \"scrollButtons\", \"TabIndicatorProps\", \"textColor\", \"theme\", \"value\", \"variant\"]);\n\n    const scrollable = variant === 'scrollable' || deprecatedScrollable;\n    process.env.NODE_ENV !== \"production\" ? warning(!centered || !scrollable, 'Material-UI: you can not use the `centered={true}` and `variant=\"scrollable\"` properties ' + 'at the same time on a `Tabs` component.') : void 0;\n    const className = classNames(classes.root, classNameProp);\n    const flexContainerClassName = classNames(classes.flexContainer, {\n      [classes.centered]: centered && !scrollable\n    });\n    const scrollerClassName = classNames(classes.scroller, {\n      [classes.fixed]: !scrollable,\n      [classes.scrollable]: scrollable\n    });\n    const indicator = React.createElement(TabIndicator, _extends({\n      className: classes.indicator,\n      color: indicatorColor\n    }, TabIndicatorProps, {\n      style: _extends({}, this.state.indicatorStyle, TabIndicatorProps.style)\n    }));\n    this.valueToIndex = new Map();\n    let childIndex = 0;\n    const children = React.Children.map(childrenProp, child => {\n      if (!React.isValidElement(child)) {\n        return null;\n      }\n\n      process.env.NODE_ENV !== \"production\" ? warning(child.type !== React.Fragment, [\"Material-UI: the Tabs component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n')) : void 0;\n      const childValue = child.props.value === undefined ? childIndex : child.props.value;\n      this.valueToIndex.set(childValue, childIndex);\n      const selected = childValue === value;\n      childIndex += 1;\n      return React.cloneElement(child, {\n        fullWidth: variant === 'fullWidth' || fullWidth,\n        indicator: selected && !this.state.mounted && indicator,\n        selected,\n        onChange,\n        textColor,\n        value: childValue\n      });\n    });\n    const conditionalElements = this.getConditionalElements();\n    return React.createElement(Component, _extends({\n      className: className\n    }, other), React.createElement(EventListener, {\n      target: \"window\",\n      onResize: this.handleResize\n    }), conditionalElements.scrollbarSizeListener, React.createElement(\"div\", {\n      className: classes.flexContainer\n    }, conditionalElements.scrollButtonLeft, React.createElement(\"div\", {\n      className: scrollerClassName,\n      style: this.state.scrollerStyle,\n      ref: ref => {\n        this.tabsRef = ref;\n      },\n      role: \"tablist\",\n      onScroll: this.handleTabsScroll\n    }, React.createElement(\"div\", {\n      className: flexContainerClassName\n    }, children), this.state.mounted && indicator), conditionalElements.scrollButtonRight));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Tabs.propTypes = {\n  /**\n   * Callback fired when the component mounts.\n   * This is useful when you want to trigger an action programmatically.\n   * It currently only supports `updateIndicator()` action.\n   *\n   * @param {object} actions This object contains all possible actions\n   * that can be triggered programmatically.\n   */\n  action: PropTypes.func,\n\n  /**\n   * If `true`, the tabs will be centered.\n   * This property is intended for large views.\n   */\n  centered: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: componentPropType,\n\n  /**\n   * If `true`, the tabs will grow to use all the available space.\n   * This property is intended for small views, like on mobile.\n   */\n  fullWidth: deprecatedPropType(PropTypes.bool, 'Instead, use the `variant=\"fullWidth\"` property.'),\n\n  /**\n   * Determines the color of the indicator.\n   */\n  indicatorColor: PropTypes.oneOf(['secondary', 'primary']),\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback\n   * @param {number} value We default to the index of the child\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, it will invoke scrolling properties and allow for horizontally\n   * scrolling (or swiping) of the tab bar.\n   */\n  scrollable: deprecatedPropType(PropTypes.bool, 'Instead, use the `variant=\"scrollable\"` property.'),\n\n  /**\n   * The component used to render the scroll buttons.\n   */\n  ScrollButtonComponent: componentPropType,\n\n  /**\n   * Determine behavior of scroll buttons when tabs are set to scroll\n   * `auto` will only present them on medium and larger viewports\n   * `on` will always present them\n   * `off` will never present them\n   */\n  scrollButtons: PropTypes.oneOf(['auto', 'on', 'off']),\n\n  /**\n   * Properties applied to the `TabIndicator` element.\n   */\n  TabIndicatorProps: PropTypes.object,\n\n  /**\n   * Determines the color of the `Tab`.\n   */\n  textColor: PropTypes.oneOf(['secondary', 'primary', 'inherit']),\n\n  /**\n   * @ignore\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * The value of the currently selected `Tab`.\n   * If you don't want any selected `Tab`, you can set this property to `false`.\n   */\n  value: PropTypes.any,\n\n  /**\n   *  Determines additional display behavior of the tabs:\n   *  - `scrollable` will invoke scrolling properties and allow for horizontally\n   *  scrolling (or swiping) of the tab bar.\n   *  -`fullWidth` will make the tabs grow to use all the available space,\n   *  which should be used for small views, like on mobile.\n   *  - `standard` will render the default state.\n   */\n  variant: PropTypes.oneOf(['standard', 'scrollable', 'fullWidth'])\n} : void 0;\nTabs.defaultProps = {\n  centered: false,\n  component: 'div',\n  indicatorColor: 'secondary',\n  ScrollButtonComponent: TabScrollButton,\n  scrollButtons: 'auto',\n  textColor: 'inherit',\n  variant: 'standard'\n};\nexport default withStyles(styles, {\n  name: 'MuiTabs',\n  withTheme: true\n})(Tabs);","map":null,"metadata":{},"sourceType":"module"}
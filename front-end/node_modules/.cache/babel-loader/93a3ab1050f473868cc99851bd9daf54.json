{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport EventListener from 'react-event-listener';\nimport debounce from 'debounce'; // < 1kb payload overhead when lodash/debounce is > 3kb.\n\nimport { componentPropType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    boxSizing: 'border-box',\n    flexShrink: 0\n  },\n\n  /* Styles applied to the `div` element that wraps the children. */\n  tile: {\n    position: 'relative',\n    display: 'block',\n    // In case it's not rendered with a div.\n    height: '100%',\n    overflow: 'hidden'\n  },\n\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\n  imgFullHeight: {\n    height: '100%',\n    transform: 'translateX(-50%)',\n    position: 'relative',\n    left: '50%'\n  },\n\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\n  imgFullWidth: {\n    width: '100%',\n    position: 'relative',\n    transform: 'translateY(-50%)',\n    top: '50%'\n  }\n};\n\nclass GridListTile extends React.Component {\n  constructor() {\n    super();\n\n    this.fit = () => {\n      const imgElement = this.imgElement;\n\n      if (!imgElement || !imgElement.complete) {\n        return;\n      }\n\n      if (imgElement.width / imgElement.height > imgElement.parentNode.offsetWidth / imgElement.parentNode.offsetHeight) {\n        imgElement.classList.remove(...this.props.classes.imgFullWidth.split(' '));\n        imgElement.classList.add(...this.props.classes.imgFullHeight.split(' '));\n      } else {\n        imgElement.classList.remove(...this.props.classes.imgFullHeight.split(' '));\n        imgElement.classList.add(...this.props.classes.imgFullWidth.split(' '));\n      }\n\n      imgElement.removeEventListener('load', this.fit);\n    };\n\n    if (typeof window !== 'undefined') {\n      this.handleResize = debounce(() => {\n        this.fit();\n      }, 166); // Corresponds to 10 frames at 60 Hz.\n    }\n  }\n\n  componentDidMount() {\n    this.ensureImageCover();\n  }\n\n  componentDidUpdate() {\n    this.ensureImageCover();\n  }\n\n  componentWillUnmount() {\n    this.handleResize.clear();\n  }\n\n  ensureImageCover() {\n    if (!this.imgElement) {\n      return;\n    }\n\n    if (this.imgElement.complete) {\n      this.fit();\n    } else {\n      this.imgElement.addEventListener('load', this.fit);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          Component = _this$props.component,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"classes\", \"className\", \"cols\", \"component\", \"rows\"]);\n\n    return React.createElement(Component, _extends({\n      className: classNames(classes.root, className)\n    }, other), React.createElement(EventListener, {\n      target: \"window\",\n      onResize: this.handleResize\n    }), React.createElement(\"div\", {\n      className: classes.tile\n    }, React.Children.map(children, child => {\n      if (!React.isValidElement(child)) {\n        return null;\n      }\n\n      if (child.type === 'img') {\n        return React.cloneElement(child, {\n          ref: node => {\n            this.imgElement = node;\n          }\n        });\n      }\n\n      return child;\n    })));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridListTile.propTypes = {\n  /**\n   * Theoretically you can pass any node as children, but the main use case is to pass an img,\n   * in which case GridListTile takes care of making the image \"cover\" available space\n   * (similar to `background-size: cover` or to `object-fit: cover`).\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Width of the tile in number of grid cells.\n   */\n  cols: PropTypes.number,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: componentPropType,\n\n  /**\n   * Height of the tile in number of grid cells.\n   */\n  rows: PropTypes.number\n} : void 0;\nGridListTile.defaultProps = {\n  cols: 1,\n  component: 'li',\n  rows: 1\n};\nexport default withStyles(styles, {\n  name: 'MuiGridListTile'\n})(GridListTile);","map":null,"metadata":{},"sourceType":"module"}
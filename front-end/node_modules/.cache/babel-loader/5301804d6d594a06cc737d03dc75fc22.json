{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent EventListener\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport EventListener from 'react-event-listener';\nimport ownerDocument from '../utils/ownerDocument';\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\nclass ClickAwayListener extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.mounted = false;\n    this.moved = false;\n\n    this.handleClickAway = event => {\n      // Ignore events that have been `event.preventDefault()` marked.\n      if (event.defaultPrevented) {\n        return;\n      } // IE 11 support, which trigger the handleClickAway even after the unbind\n\n\n      if (!this.mounted) {\n        return;\n      } // Do not act if user performed touchmove\n\n\n      if (this.moved) {\n        this.moved = false;\n        return;\n      } // The child might render null.\n\n\n      if (!this.node) {\n        return;\n      }\n\n      const doc = ownerDocument(this.node);\n\n      if (doc.documentElement && doc.documentElement.contains(event.target) && !this.node.contains(event.target)) {\n        this.props.onClickAway(event);\n      }\n    };\n\n    this.handleTouchMove = () => {\n      this.moved = true;\n    };\n  }\n\n  componentDidMount() {\n    // Finds the first child when a component returns a fragment.\n    // https://github.com/facebook/react/blob/036ae3c6e2f056adffc31dfb78d1b6f0c63272f0/packages/react-dom/src/__tests__/ReactDOMFiber-test.js#L105\n    this.node = ReactDOM.findDOMNode(this);\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          mouseEvent = _this$props.mouseEvent,\n          touchEvent = _this$props.touchEvent,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"mouseEvent\", \"touchEvent\", \"onClickAway\"]);\n\n    const listenerProps = {};\n\n    if (mouseEvent !== false) {\n      listenerProps[mouseEvent] = this.handleClickAway;\n    }\n\n    if (touchEvent !== false) {\n      listenerProps[touchEvent] = this.handleClickAway;\n      listenerProps.onTouchMove = this.handleTouchMove;\n    }\n\n    return React.createElement(React.Fragment, null, children, React.createElement(EventListener, _extends({\n      target: \"document\"\n    }, listenerProps, other)));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchStart', 'onTouchEnd', false])\n} : void 0;\nClickAwayListener.defaultProps = {\n  mouseEvent: 'onMouseUp',\n  touchEvent: 'onTouchEnd'\n};\nexport default ClickAwayListener;","map":null,"metadata":{},"sourceType":"module"}
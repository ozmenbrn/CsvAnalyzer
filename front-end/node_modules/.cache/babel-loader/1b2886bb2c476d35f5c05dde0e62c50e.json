{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent Popover\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport getScrollbarSize from 'dom-helpers/util/scrollbarSize';\nimport withStyles from '../styles/withStyles';\nimport Popover from '../Popover';\nimport MenuList from '../MenuList';\nconst RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nconst LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\nexport const styles = {\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    // specZ: The maximum height of a simple menu should be one or more rows less than the view\n    // height. This ensures a tapable area outside of the simple menu with which to dismiss\n    // the menu.\n    maxHeight: 'calc(100% - 96px)',\n    // Add iOS momentum scrolling.\n    WebkitOverflowScrolling: 'touch'\n  }\n};\n\nclass Menu extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getContentAnchorEl = () => {\n      if (this.menuListRef.selectedItemRef) {\n        return ReactDOM.findDOMNode(this.menuListRef.selectedItemRef);\n      }\n\n      return ReactDOM.findDOMNode(this.menuListRef).firstChild;\n    };\n\n    this.focus = () => {\n      if (this.menuListRef && this.menuListRef.selectedItemRef) {\n        ReactDOM.findDOMNode(this.menuListRef.selectedItemRef).focus();\n        return;\n      }\n\n      const menuList = ReactDOM.findDOMNode(this.menuListRef);\n\n      if (menuList && menuList.firstChild) {\n        menuList.firstChild.focus();\n      }\n    };\n\n    this.handleMenuListRef = ref => {\n      this.menuListRef = ref;\n    };\n\n    this.handleEntering = element => {\n      const _this$props2 = this.props,\n            disableAutoFocusItem = _this$props2.disableAutoFocusItem,\n            theme = _this$props2.theme;\n      const menuList = ReactDOM.findDOMNode(this.menuListRef); // Focus so the scroll computation of the Popover works as expected.\n\n      if (disableAutoFocusItem !== true) {\n        this.focus();\n      } // Let's ignore that piece of logic if users are already overriding the width\n      // of the menu.\n\n\n      if (menuList && element.clientHeight < menuList.clientHeight && !menuList.style.width) {\n        const size = \"\".concat(getScrollbarSize(), \"px\");\n        menuList.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = size;\n        menuList.style.width = \"calc(100% + \".concat(size, \")\");\n      }\n\n      if (this.props.onEntering) {\n        this.props.onEntering(element);\n      }\n    };\n\n    this.handleListKeyDown = event => {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n\n        if (this.props.onClose) {\n          this.props.onClose(event, 'tabKeyDown');\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.open && this.props.disableAutoFocusItem !== true) {\n      this.focus();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          classes = _this$props.classes,\n          MenuListProps = _this$props.MenuListProps,\n          _this$props$PaperProp = _this$props.PaperProps,\n          PaperProps = _this$props$PaperProp === void 0 ? {} : _this$props$PaperProp,\n          PopoverClasses = _this$props.PopoverClasses,\n          theme = _this$props.theme,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"classes\", \"disableAutoFocusItem\", \"MenuListProps\", \"onEntering\", \"PaperProps\", \"PopoverClasses\", \"theme\"]);\n\n    return React.createElement(Popover, _extends({\n      getContentAnchorEl: this.getContentAnchorEl,\n      classes: PopoverClasses,\n      onEntering: this.handleEntering,\n      anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n      transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n      PaperProps: _extends({}, PaperProps, {\n        classes: _extends({}, PaperProps.classes, {\n          root: classes.paper\n        })\n      })\n    }, other), React.createElement(MenuList, _extends({\n      onKeyDown: this.handleListKeyDown\n    }, MenuListProps, {\n      ref: this.handleMenuListRef\n    }), children));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes = {\n  /**\n   * The DOM element used to set the position of the menu.\n   */\n  anchorEl: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * If `true`, the selected / first menu item will not be auto focused.\n   */\n  disableAutoFocusItem: PropTypes.bool,\n\n  /**\n   * Properties applied to the [`MenuList`](/api/menu-list/) element.\n   */\n  MenuListProps: PropTypes.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback\n   * @param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired before the Menu enters.\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu has entered.\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu is entering.\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired before the Menu exits.\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu has exited.\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu is exiting.\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * If `true`, the menu is visible.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * `classes` property applied to the [`Popover`](/api/popover/) element.\n   */\n  PopoverClasses: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  }), PropTypes.oneOf(['auto'])])\n} : void 0;\nMenu.defaultProps = {\n  disableAutoFocusItem: false,\n  transitionDuration: 'auto'\n};\nexport default withStyles(styles, {\n  name: 'MuiMenu',\n  withTheme: true\n})(Menu);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport { setRef } from '../utils/reactHelpers';\n/**\n * Helper component to allow attaching a ref to a\n * wrapped element to access the underlying DOM element.\n *\n * It's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.\n * For example:\n * ```jsx\n * import React from 'react';\n * import RootRef from '@material-ui/core/RootRef';\n *\n * class MyComponent extends React.Component {\n *   constructor() {\n *     super();\n *     this.domRef = React.createRef();\n *   }\n *\n *   componentDidMount() {\n *     console.log(this.domRef.current); // DOM node\n *   }\n *\n *   render() {\n *     return (\n *       <RootRef rootRef={this.domRef}>\n *         <SomeChildComponent />\n *       </RootRef>\n *     );\n *   }\n * }\n * ```\n */\n\nclass RootRef extends React.Component {\n  componentDidMount() {\n    this.ref = ReactDOM.findDOMNode(this);\n    setRef(this.props.rootRef, this.ref);\n  }\n\n  componentDidUpdate(prevProps) {\n    const ref = ReactDOM.findDOMNode(this);\n\n    if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {\n      if (prevProps.rootRef !== this.props.rootRef) {\n        setRef(prevProps.rootRef, null);\n      }\n\n      this.ref = ref;\n      setRef(this.props.rootRef, this.ref);\n    }\n  }\n\n  componentWillUnmount() {\n    this.ref = null;\n    setRef(this.props.rootRef, null);\n  }\n\n  render() {\n    return this.props.children;\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? RootRef.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * Provide a way to access the DOM node of the wrapped element.\n   * You can provide a callback ref or a `React.createRef()` ref.\n   */\n  rootRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? RootRef.propTypes = exactProp(RootRef.propTypes) : void 0;\n}\n\nexport default RootRef;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent Paper\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '../styles/withStyles';\nimport Paper from '../Paper';\nimport Typography from '../Typography';\nimport { emphasize } from '../styles/colorManipulator';\nexport const styles = theme => {\n  const emphasis = theme.palette.type === 'light' ? 0.8 : 0.98;\n  const backgroundColor = emphasize(theme.palette.background.default, emphasis);\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.getContrastText(backgroundColor),\n      backgroundColor,\n      display: 'flex',\n      alignItems: 'center',\n      flexWrap: 'wrap',\n      padding: '6px 24px',\n      [theme.breakpoints.up('md')]: {\n        minWidth: 288,\n        maxWidth: 568,\n        borderRadius: theme.shape.borderRadius\n      },\n      [theme.breakpoints.down('sm')]: {\n        flexGrow: 1\n      }\n    },\n\n    /* Styles applied to the message wrapper element. */\n    message: {\n      padding: '8px 0'\n    },\n\n    /* Styles applied to the action wrapper element if `action` is provided. */\n    action: {\n      display: 'flex',\n      alignItems: 'center',\n      marginLeft: 'auto',\n      paddingLeft: 24,\n      marginRight: -8\n    }\n  };\n};\n\nfunction SnackbarContent(props) {\n  const action = props.action,\n        classes = props.classes,\n        className = props.className,\n        message = props.message,\n        other = _objectWithoutPropertiesLoose(props, [\"action\", \"classes\", \"className\", \"message\"]);\n\n  return React.createElement(Paper, _extends({\n    component: Typography,\n    headlineMapping: {\n      body1: 'div',\n      body2: 'div'\n    },\n    role: \"alertdialog\",\n    square: true,\n    elevation: 6,\n    className: classNames(classes.root, className)\n  }, other), React.createElement(\"div\", {\n    className: classes.message\n  }, message), action ? React.createElement(\"div\", {\n    className: classes.action\n  }, action) : null);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? SnackbarContent.propTypes = {\n  /**\n   * The action to display.\n   */\n  action: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiSnackbarContent'\n})(SnackbarContent);","map":null,"metadata":{},"sourceType":"module"}
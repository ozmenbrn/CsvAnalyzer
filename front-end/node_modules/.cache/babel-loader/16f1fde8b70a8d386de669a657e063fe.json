{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent ButtonBase\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ButtonBase from '../ButtonBase';\nimport IconButton from '../IconButton';\nimport withStyles from '../styles/withStyles';\nexport const styles = theme => {\n  const transition = {\n    duration: theme.transitions.duration.shortest\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex',\n      minHeight: 8 * 6,\n      transition: theme.transitions.create(['min-height', 'background-color'], transition),\n      padding: '0 24px 0 24px',\n      '&:hover:not($disabled)': {\n        cursor: 'pointer'\n      },\n      '&$expanded': {\n        minHeight: 64\n      },\n      '&$focused': {\n        backgroundColor: theme.palette.grey[300]\n      },\n      '&$disabled': {\n        opacity: 0.38\n      }\n    },\n\n    /* Styles applied to the root element if `expanded={true}`. */\n    expanded: {},\n\n    /* Styles applied to the root and children wrapper elements when focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the children wrapper element. */\n    content: {\n      display: 'flex',\n      flexGrow: 1,\n      transition: theme.transitions.create(['margin'], transition),\n      margin: '12px 0',\n      '& > :last-child': {\n        paddingRight: 32\n      },\n      '&$expanded': {\n        margin: '20px 0'\n      }\n    },\n\n    /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */\n    expandIcon: {\n      position: 'absolute',\n      top: '50%',\n      right: 8,\n      transform: 'translateY(-50%) rotate(0deg)',\n      transition: theme.transitions.create('transform', transition),\n      '&:hover': {\n        // Disable the hover effect for the IconButton,\n        // because a hover effect should apply to the entire Expand button and\n        // not only to the IconButton.\n        backgroundColor: 'transparent'\n      },\n      '&$expanded': {\n        transform: 'translateY(-50%) rotate(180deg)'\n      }\n    }\n  };\n};\n\nclass ExpansionPanelSummary extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      focused: false\n    };\n\n    this.handleFocusVisible = event => {\n      this.setState({\n        focused: true\n      });\n\n      if (this.props.onFocusVisible) {\n        this.props.onFocusVisible(event);\n      }\n    };\n\n    this.handleBlur = event => {\n      this.setState({\n        focused: false\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n    };\n\n    this.handleChange = event => {\n      const _this$props2 = this.props,\n            onChange = _this$props2.onChange,\n            onClick = _this$props2.onClick;\n\n      if (onChange) {\n        onChange(event);\n      }\n\n      if (onClick) {\n        onClick(event);\n      }\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          disabled = _this$props.disabled,\n          expanded = _this$props.expanded,\n          expandIcon = _this$props.expandIcon,\n          IconButtonProps = _this$props.IconButtonProps,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"classes\", \"className\", \"disabled\", \"expanded\", \"expandIcon\", \"IconButtonProps\", \"onBlur\", \"onChange\", \"onClick\", \"onFocusVisible\"]);\n\n    const focused = this.state.focused;\n    return React.createElement(ButtonBase, _extends({\n      focusRipple: false,\n      disableRipple: true,\n      disabled: disabled,\n      component: \"div\",\n      \"aria-expanded\": expanded,\n      className: classNames(classes.root, {\n        [classes.disabled]: disabled,\n        [classes.expanded]: expanded,\n        [classes.focused]: focused\n      }, className),\n      onFocusVisible: this.handleFocusVisible,\n      onBlur: this.handleBlur,\n      onClick: this.handleChange\n    }, other), React.createElement(\"div\", {\n      className: classNames(classes.content, {\n        [classes.expanded]: expanded\n      })\n    }, children), expandIcon && React.createElement(IconButton, _extends({\n      disabled: disabled,\n      className: classNames(classes.expandIcon, {\n        [classes.expanded]: expanded\n      }),\n      component: \"div\",\n      tabIndex: -1,\n      \"aria-hidden\": \"true\"\n    }, IconButtonProps), expandIcon));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ExpansionPanelSummary.propTypes = {\n  /**\n   * The content of the expansion panel summary.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   * If `true`, the summary will be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @ignore\n   * If `true`, expands the summary, otherwise collapse it.\n   */\n  expanded: PropTypes.bool,\n\n  /**\n   * The icon to display as the expand indicator.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * Properties applied to the `TouchRipple` element wrapping the expand icon.\n   */\n  IconButtonProps: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func\n} : void 0;\nExpansionPanelSummary.defaultProps = {\n  disabled: false\n};\nExpansionPanelSummary.muiName = 'ExpansionPanelSummary';\nexport default withStyles(styles, {\n  name: 'MuiExpansionPanelSummary'\n})(ExpansionPanelSummary);","map":null,"metadata":{},"sourceType":"module"}
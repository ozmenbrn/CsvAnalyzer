{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\nimport classNames from 'classnames';\nimport withStyles from '../styles/withStyles';\nimport Ripple from './Ripple';\nconst DURATION = 550;\nexport const DELAY_RIPPLE = 80;\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    position: 'absolute',\n    overflow: 'hidden',\n    borderRadius: 'inherit',\n    width: '100%',\n    height: '100%',\n    left: 0,\n    top: 0,\n    pointerEvents: 'none',\n    zIndex: 0\n  },\n\n  /* Styles applied to the internal `Ripple` components `ripple` class. */\n  ripple: {\n    width: 50,\n    height: 50,\n    left: 0,\n    top: 0,\n    opacity: 0,\n    position: 'absolute'\n  },\n\n  /* Styles applied to the internal `Ripple` components `rippleVisible` class. */\n  rippleVisible: {\n    opacity: 0.3,\n    transform: 'scale(1)',\n    animation: \"mui-ripple-enter \".concat(DURATION, \"ms \").concat(theme.transitions.easing.easeInOut),\n    // Backward compatible logic between JSS v9 and v10.\n    // To remove with the release of Material-UI v4\n    animationName: '$mui-ripple-enter'\n  },\n\n  /* Styles applied to the internal `Ripple` components `ripplePulsate` class. */\n  ripplePulsate: {\n    animationDuration: \"\".concat(theme.transitions.duration.shorter, \"ms\")\n  },\n\n  /* Styles applied to the internal `Ripple` components `child` class. */\n  child: {\n    opacity: 1,\n    display: 'block',\n    width: '100%',\n    height: '100%',\n    borderRadius: '50%',\n    backgroundColor: 'currentColor'\n  },\n\n  /* Styles applied to the internal `Ripple` components `childLeaving` class. */\n  childLeaving: {\n    opacity: 0,\n    animation: \"mui-ripple-exit \".concat(DURATION, \"ms \").concat(theme.transitions.easing.easeInOut),\n    // Backward compatible logic between JSS v9 and v10.\n    // To remove with the release of Material-UI v4\n    animationName: '$mui-ripple-exit'\n  },\n\n  /* Styles applied to the internal `Ripple` components `childPulsate` class. */\n  childPulsate: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    animation: \"mui-ripple-pulsate 2500ms \".concat(theme.transitions.easing.easeInOut, \" 200ms infinite\"),\n    // Backward compatible logic between JSS v9 and v10.\n    // To remove with the release of Material-UI v4\n    animationName: '$mui-ripple-pulsate'\n  },\n  '@keyframes mui-ripple-enter': {\n    '0%': {\n      transform: 'scale(0)',\n      opacity: 0.1\n    },\n    '100%': {\n      transform: 'scale(1)',\n      opacity: 0.3\n    }\n  },\n  '@keyframes mui-ripple-exit': {\n    '0%': {\n      opacity: 1\n    },\n    '100%': {\n      opacity: 0\n    }\n  },\n  '@keyframes mui-ripple-pulsate': {\n    '0%': {\n      transform: 'scale(1)'\n    },\n    '50%': {\n      transform: 'scale(0.92)'\n    },\n    '100%': {\n      transform: 'scale(1)'\n    }\n  }\n});\n\nclass TouchRipple extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      nextKey: 0,\n      ripples: []\n    };\n\n    this.pulsate = () => {\n      this.start({}, {\n        pulsate: true\n      });\n    };\n\n    this.start = (event = {}, options = {}, cb) => {\n      const _options$pulsate = options.pulsate,\n            pulsate = _options$pulsate === void 0 ? false : _options$pulsate,\n            _options$center = options.center,\n            center = _options$center === void 0 ? this.props.center || options.pulsate : _options$center,\n            _options$fakeElement = options.fakeElement,\n            fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;\n\n      if (event.type === 'mousedown' && this.ignoringMouseDown) {\n        this.ignoringMouseDown = false;\n        return;\n      }\n\n      if (event.type === 'touchstart') {\n        this.ignoringMouseDown = true;\n      }\n\n      const element = fakeElement ? null : ReactDOM.findDOMNode(this);\n      const rect = element ? element.getBoundingClientRect() : {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      }; // Get the size of the ripple\n\n      let rippleX;\n      let rippleY;\n      let rippleSize;\n\n      if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {\n        rippleX = Math.round(rect.width / 2);\n        rippleY = Math.round(rect.height / 2);\n      } else {\n        const clientX = event.clientX ? event.clientX : event.touches[0].clientX;\n        const clientY = event.clientY ? event.clientY : event.touches[0].clientY;\n        rippleX = Math.round(clientX - rect.left);\n        rippleY = Math.round(clientY - rect.top);\n      }\n\n      if (center) {\n        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3); // For some reason the animation is broken on Mobile Chrome if the size if even.\n\n        if (rippleSize % 2 === 0) {\n          rippleSize += 1;\n        }\n      } else {\n        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;\n        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;\n        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);\n      } // Touche devices\n\n\n      if (event.touches) {\n        // Prepare the ripple effect.\n        this.startTimerCommit = () => {\n          this.startCommit({\n            pulsate,\n            rippleX,\n            rippleY,\n            rippleSize,\n            cb\n          });\n        }; // Delay the execution of the ripple effect.\n\n\n        this.startTimer = setTimeout(() => {\n          if (this.startTimerCommit) {\n            this.startTimerCommit();\n            this.startTimerCommit = null;\n          }\n        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.\n      } else {\n        this.startCommit({\n          pulsate,\n          rippleX,\n          rippleY,\n          rippleSize,\n          cb\n        });\n      }\n    };\n\n    this.startCommit = params => {\n      const pulsate = params.pulsate,\n            rippleX = params.rippleX,\n            rippleY = params.rippleY,\n            rippleSize = params.rippleSize,\n            cb = params.cb;\n      this.setState(state => ({\n        nextKey: state.nextKey + 1,\n        ripples: [...state.ripples, React.createElement(Ripple, {\n          key: state.nextKey,\n          classes: this.props.classes,\n          timeout: {\n            exit: DURATION,\n            enter: DURATION\n          },\n          pulsate: pulsate,\n          rippleX: rippleX,\n          rippleY: rippleY,\n          rippleSize: rippleSize\n        })]\n      }), cb);\n    };\n\n    this.stop = (event, cb) => {\n      clearTimeout(this.startTimer);\n      const ripples = this.state.ripples; // The touch interaction occurs too quickly.\n      // We still want to show ripple effect.\n\n      if (event.type === 'touchend' && this.startTimerCommit) {\n        event.persist();\n        this.startTimerCommit();\n        this.startTimerCommit = null;\n        this.startTimer = setTimeout(() => {\n          this.stop(event, cb);\n        });\n        return;\n      }\n\n      this.startTimerCommit = null;\n\n      if (ripples && ripples.length) {\n        this.setState({\n          ripples: ripples.slice(1)\n        }, cb);\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.startTimer);\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"center\", \"classes\", \"className\"]);\n\n    return React.createElement(TransitionGroup, _extends({\n      component: \"span\",\n      enter: true,\n      exit: true,\n      className: classNames(classes.root, className)\n    }, other), this.state.ripples);\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? TouchRipple.propTypes = {\n  /**\n   * If `true`, the ripple starts at the center of the component\n   * rather than at the point of interaction.\n   */\n  center: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nTouchRipple.defaultProps = {\n  center: false\n};\nexport default withStyles(styles, {\n  flip: false,\n  name: 'MuiTouchRipple'\n})(TouchRipple);","map":null,"metadata":{},"sourceType":"module"}
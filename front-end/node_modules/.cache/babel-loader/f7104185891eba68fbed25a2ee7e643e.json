{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport classNames from 'classnames';\nimport { componentPropType } from '@material-ui/utils';\nimport formControlState from '../FormControl/formControlState';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport withFormControlContext from '../FormControl/withFormControlContext';\nimport withStyles from '../styles/withStyles';\nimport { setRef } from '../utils/reactHelpers';\nimport Textarea from './Textarea';\nimport { isFilled } from './utils';\nexport const styles = theme => {\n  const light = theme.palette.type === 'light';\n  const placeholder = {\n    color: 'currentColor',\n    opacity: light ? 0.42 : 0.5,\n    transition: theme.transitions.create('opacity', {\n      duration: theme.transitions.duration.shorter\n    })\n  };\n  const placeholderHidden = {\n    opacity: 0\n  };\n  const placeholderVisible = {\n    opacity: light ? 0.42 : 0.5\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      // Mimics the default input display property used by browsers for an input.\n      fontFamily: theme.typography.fontFamily,\n      color: theme.palette.text.primary,\n      fontSize: theme.typography.pxToRem(16),\n      lineHeight: '1.1875em',\n      // Reset (19px), match the native input line-height\n      cursor: 'text',\n      display: 'inline-flex',\n      alignItems: 'center',\n      '&$disabled': {\n        color: theme.palette.text.disabled,\n        cursor: 'default'\n      }\n    },\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {},\n\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: {},\n\n    /* Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: {},\n\n    /* Styles applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\")\n    },\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Styles applied to the `input` element. */\n    input: {\n      font: 'inherit',\n      color: 'currentColor',\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\"),\n      border: 0,\n      boxSizing: 'content-box',\n      background: 'none',\n      margin: 0,\n      // Reset for Safari\n      // Remove grey highlight\n      WebkitTapHighlightColor: 'transparent',\n      display: 'block',\n      // Make the flex item shrink with Firefox\n      minWidth: 0,\n      width: '100%',\n      // Fix IE 11 width issue\n      '&::-webkit-input-placeholder': placeholder,\n      '&::-moz-placeholder': placeholder,\n      // Firefox 19+\n      '&:-ms-input-placeholder': placeholder,\n      // IE 11\n      '&::-ms-input-placeholder': placeholder,\n      // Edge\n      '&:focus': {\n        outline: 0\n      },\n      // Reset Firefox invalid required input style\n      '&:invalid': {\n        boxShadow: 'none'\n      },\n      '&::-webkit-search-decoration': {\n        // Remove the padding when type=search.\n        '-webkit-appearance': 'none'\n      },\n      // Show and hide the placeholder logic\n      'label[data-shrink=false] + $formControl &': {\n        '&::-webkit-input-placeholder': placeholderHidden,\n        '&::-moz-placeholder': placeholderHidden,\n        // Firefox 19+\n        '&:-ms-input-placeholder': placeholderHidden,\n        // IE 11\n        '&::-ms-input-placeholder': placeholderHidden,\n        // Edge\n        '&:focus::-webkit-input-placeholder': placeholderVisible,\n        '&:focus::-moz-placeholder': placeholderVisible,\n        // Firefox 19+\n        '&:focus:-ms-input-placeholder': placeholderVisible,\n        // IE 11\n        '&:focus::-ms-input-placeholder': placeholderVisible // Edge\n\n      },\n      '&$disabled': {\n        opacity: 1 // Reset iOS opacity\n\n      }\n    },\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {\n      paddingTop: 4 - 1\n    },\n\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {\n      resize: 'none',\n      padding: 0\n    },\n\n    /* Styles applied to the `input` element if `type` is not \"text\"`. */\n    inputType: {\n      // type=\"date\" or type=\"time\", etc. have specific styles we need to reset.\n      height: '1.1875em' // Reset (19px), match the native input line-height\n\n    },\n\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {\n      // Improve type search style.\n      '-moz-appearance': 'textfield',\n      '-webkit-appearance': 'textfield'\n    },\n\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\n    inputAdornedStart: {},\n\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\n    inputAdornedEnd: {}\n  };\n};\n/**\n * `InputBase` contains as few styles as possible.\n * It aims to be a simple building block for creating an input.\n * It contains a load of style reset and some state logic.\n */\n\nclass InputBase extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    // The blur won't fire when the disabled state is set on a focused input.\n    // We need to book keep the focused state manually.\n    if (props.disabled && state.focused) {\n      return {\n        focused: false\n      };\n    }\n\n    return null;\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      focused: false\n    };\n\n    this.handleFocus = event => {\n      const muiFormControl = this.props.muiFormControl; // Fix a bug with IE 11 where the focus/blur events are triggered\n      // while the input is disabled.\n\n      if (formControlState({\n        props: this.props,\n        muiFormControl,\n        states: ['disabled']\n      }).disabled) {\n        event.stopPropagation();\n        return;\n      }\n\n      this.setState({\n        focused: true\n      });\n\n      if (this.props.onFocus) {\n        this.props.onFocus(event);\n      }\n\n      if (muiFormControl && muiFormControl.onFocus) {\n        muiFormControl.onFocus(event);\n      }\n    };\n\n    this.handleBlur = event => {\n      this.setState({\n        focused: false\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n\n      const muiFormControl = this.props.muiFormControl;\n\n      if (muiFormControl && muiFormControl.onBlur) {\n        muiFormControl.onBlur(event);\n      }\n    };\n\n    this.handleChange = (...args) => {\n      if (!this.isControlled) {\n        this.checkDirty(this.inputRef);\n      } // Perform in the willUpdate\n\n\n      if (this.props.onChange) {\n        this.props.onChange(...args);\n      }\n    };\n\n    this.handleRefInput = ref => {\n      this.inputRef = ref;\n      process.env.NODE_ENV !== \"production\" ? warning(!ref || ref instanceof HTMLInputElement || ref.focus, ['Material-UI: you have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` property.', 'Make sure the `inputRef` property is called with a HTMLInputElement.'].join('\\n')) : void 0;\n      let refProp;\n\n      if (this.props.inputRef) {\n        refProp = this.props.inputRef;\n      } else if (this.props.inputProps && this.props.inputProps.ref) {\n        refProp = this.props.inputProps.ref;\n      }\n\n      setRef(refProp, ref);\n    };\n\n    this.handleClick = event => {\n      if (this.inputRef && event.currentTarget === event.target) {\n        this.inputRef.focus();\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(event);\n      }\n    };\n\n    this.isControlled = props.value != null;\n\n    if (this.isControlled) {\n      this.checkDirty(props);\n    }\n  }\n\n  componentDidMount() {\n    if (!this.isControlled) {\n      this.checkDirty(this.inputRef);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // Book keep the focused state.\n    if (!prevProps.disabled && this.props.disabled) {\n      const muiFormControl = this.props.muiFormControl;\n\n      if (muiFormControl && muiFormControl.onBlur) {\n        muiFormControl.onBlur();\n      }\n    }\n\n    if (this.isControlled) {\n      this.checkDirty(this.props);\n    } // else performed in the onChange\n\n  }\n\n  checkDirty(obj) {\n    const muiFormControl = this.props.muiFormControl;\n\n    if (isFilled(obj)) {\n      if (muiFormControl && muiFormControl.onFilled) {\n        muiFormControl.onFilled();\n      }\n\n      if (this.props.onFilled) {\n        this.props.onFilled();\n      }\n\n      return;\n    }\n\n    if (muiFormControl && muiFormControl.onEmpty) {\n      muiFormControl.onEmpty();\n    }\n\n    if (this.props.onEmpty) {\n      this.props.onEmpty();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          autoComplete = _this$props.autoComplete,\n          autoFocus = _this$props.autoFocus,\n          classes = _this$props.classes,\n          classNameProp = _this$props.className,\n          defaultValue = _this$props.defaultValue,\n          endAdornment = _this$props.endAdornment,\n          fullWidth = _this$props.fullWidth,\n          id = _this$props.id,\n          inputComponent = _this$props.inputComponent,\n          _this$props$inputProp = _this$props.inputProps,\n          _this$props$inputProp2 = _this$props$inputProp === void 0 ? {} : _this$props$inputProp,\n          inputPropsClassName = _this$props$inputProp2.className,\n          muiFormControl = _this$props.muiFormControl,\n          multiline = _this$props.multiline,\n          name = _this$props.name,\n          onKeyDown = _this$props.onKeyDown,\n          onKeyUp = _this$props.onKeyUp,\n          placeholder = _this$props.placeholder,\n          readOnly = _this$props.readOnly,\n          renderPrefix = _this$props.renderPrefix,\n          rows = _this$props.rows,\n          rowsMax = _this$props.rowsMax,\n          startAdornment = _this$props.startAdornment,\n          type = _this$props.type,\n          value = _this$props.value,\n          inputPropsProp = _objectWithoutPropertiesLoose(_this$props.inputProps, [\"className\"]),\n          other = _objectWithoutPropertiesLoose(_this$props, [\"autoComplete\", \"autoFocus\", \"classes\", \"className\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"fullWidth\", \"id\", \"inputComponent\", \"inputProps\", \"inputRef\", \"margin\", \"muiFormControl\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onClick\", \"onEmpty\", \"onFilled\", \"onFocus\", \"onKeyDown\", \"onKeyUp\", \"placeholder\", \"readOnly\", \"renderPrefix\", \"rows\", \"rowsMax\", \"startAdornment\", \"type\", \"value\"]);\n\n    const ariaDescribedby = other['aria-describedby'];\n    delete other['aria-describedby'];\n    const fcs = formControlState({\n      props: this.props,\n      muiFormControl,\n      states: ['disabled', 'error', 'margin', 'required', 'filled']\n    });\n    const focused = muiFormControl ? muiFormControl.focused : this.state.focused;\n    const className = classNames(classes.root, {\n      [classes.disabled]: fcs.disabled,\n      [classes.error]: fcs.error,\n      [classes.fullWidth]: fullWidth,\n      [classes.focused]: focused,\n      [classes.formControl]: muiFormControl,\n      [classes.marginDense]: fcs.margin === 'dense',\n      [classes.multiline]: multiline,\n      [classes.adornedStart]: startAdornment,\n      [classes.adornedEnd]: endAdornment\n    }, classNameProp);\n    const inputClassName = classNames(classes.input, {\n      [classes.disabled]: fcs.disabled,\n      [classes.inputType]: type !== 'text',\n      [classes.inputTypeSearch]: type === 'search',\n      [classes.inputMultiline]: multiline,\n      [classes.inputMarginDense]: fcs.margin === 'dense',\n      [classes.inputAdornedStart]: startAdornment,\n      [classes.inputAdornedEnd]: endAdornment\n    }, inputPropsClassName);\n    let InputComponent = inputComponent;\n\n    let inputProps = _extends({}, inputPropsProp, {\n      ref: this.handleRefInput\n    });\n\n    if (typeof InputComponent !== 'string') {\n      inputProps = _extends({\n        // Rename ref to inputRef as we don't know the\n        // provided `inputComponent` structure.\n        inputRef: this.handleRefInput,\n        type\n      }, inputProps, {\n        ref: null\n      });\n    } else if (multiline) {\n      if (rows && !rowsMax) {\n        InputComponent = 'textarea';\n      } else {\n        inputProps = _extends({\n          rowsMax,\n          textareaRef: this.handleRefInput\n        }, inputProps, {\n          ref: null\n        });\n        InputComponent = Textarea;\n      }\n    } else {\n      inputProps = _extends({\n        type\n      }, inputProps);\n    }\n\n    return React.createElement(\"div\", _extends({\n      className: className,\n      onClick: this.handleClick\n    }, other), renderPrefix ? renderPrefix(_extends({}, fcs, {\n      startAdornment,\n      focused\n    })) : null, startAdornment, React.createElement(FormControlContext.Provider, {\n      value: null\n    }, React.createElement(InputComponent, _extends({\n      \"aria-invalid\": fcs.error,\n      \"aria-describedby\": ariaDescribedby,\n      autoComplete: autoComplete,\n      autoFocus: autoFocus,\n      className: inputClassName,\n      defaultValue: defaultValue,\n      disabled: fcs.disabled,\n      id: id,\n      name: name,\n      onBlur: this.handleBlur,\n      onChange: this.handleChange,\n      onFocus: this.handleFocus,\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp,\n      placeholder: placeholder,\n      readOnly: readOnly,\n      required: fcs.required,\n      rows: rows,\n      value: value\n    }, inputProps))), endAdornment);\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? InputBase.propTypes = {\n  /**\n   * This property helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it here:\n   * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the input will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The CSS class name of the wrapper element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default input value, useful when not controlling the component.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.object, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.object]))]),\n\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The component used for the native input.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: componentPropType,\n\n  /**\n   * Attributes applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEmpty: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFilled: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  renderPrefix: PropTypes.func,\n\n  /**\n   * If `true`, the input will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * Type of the input element. It should be a valid HTML5 input type.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The input value, required for a controlled component.\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.object, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.object]))])\n} : void 0;\nInputBase.defaultProps = {\n  fullWidth: false,\n  inputComponent: 'input',\n  multiline: false,\n  type: 'text'\n};\nexport default withStyles(styles, {\n  name: 'MuiInputBase'\n})(withFormControlContext(InputBase));","map":null,"metadata":{},"sourceType":"module"}
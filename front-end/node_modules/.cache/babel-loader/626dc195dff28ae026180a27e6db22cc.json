{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\"; // @inheritedComponent ButtonBase\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { componentPropType, chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport ButtonBase from '../ButtonBase';\nimport { capitalize } from '../utils/helpers';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: _extends({\n    lineHeight: 1.75\n  }, theme.typography.button, {\n    boxSizing: 'border-box',\n    minWidth: 64,\n    padding: '6px 16px',\n    borderRadius: theme.shape.borderRadius,\n    color: theme.palette.text.primary,\n    transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n      duration: theme.transitions.duration.short\n    }),\n    '&:hover': {\n      textDecoration: 'none',\n      backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      },\n      '&$disabled': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled\n    }\n  }),\n\n  /* Styles applied to the span element that wraps the children. */\n  label: {\n    width: '100%',\n    // assure the correct width for iOS Safari\n    display: 'inherit',\n    alignItems: 'inherit',\n    justifyContent: 'inherit'\n  },\n\n  /* Styles applied to the root element if `variant=\"text\"`. */\n  text: {\n    padding: '6px 8px'\n  },\n\n  /* Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`. */\n  textPrimary: {\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`. */\n  textSecondary: {\n    color: theme.palette.secondary.main,\n    '&:hover': {\n      backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  },\n\n  /* Styles applied to the root element for backwards compatibility with legacy variant naming. */\n  flat: {},\n\n  /* Styles applied to the root element for backwards compatibility with legacy variant naming. */\n  flatPrimary: {},\n\n  /* Styles applied to the root element for backwards compatibility with legacy variant naming. */\n  flatSecondary: {},\n\n  /* Styles applied to the root element if `variant=\"outlined\"`. */\n  outlined: {\n    padding: '5px 16px',\n    border: \"1px solid \".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),\n    '&$disabled': {\n      border: \"1px solid \".concat(theme.palette.action.disabled)\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`. */\n  outlinedPrimary: {\n    color: theme.palette.primary.main,\n    border: \"1px solid \".concat(fade(theme.palette.primary.main, 0.5)),\n    '&:hover': {\n      border: \"1px solid \".concat(theme.palette.primary.main),\n      backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`. */\n  outlinedSecondary: {\n    color: theme.palette.secondary.main,\n    border: \"1px solid \".concat(fade(theme.palette.secondary.main, 0.5)),\n    '&:hover': {\n      border: \"1px solid \".concat(theme.palette.secondary.main),\n      backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&$disabled': {\n      border: \"1px solid \".concat(theme.palette.action.disabled)\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"[contained | fab]\"`. */\n  contained: {\n    color: theme.palette.getContrastText(theme.palette.grey[300]),\n    backgroundColor: theme.palette.grey[300],\n    boxShadow: theme.shadows[2],\n    '&$focusVisible': {\n      boxShadow: theme.shadows[6]\n    },\n    '&:active': {\n      boxShadow: theme.shadows[8]\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled,\n      boxShadow: theme.shadows[0],\n      backgroundColor: theme.palette.action.disabledBackground\n    },\n    '&:hover': {\n      backgroundColor: theme.palette.grey.A100,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.grey[300]\n      },\n      '&$disabled': {\n        backgroundColor: theme.palette.action.disabledBackground\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"[contained | fab]\"` and `color=\"primary\"`. */\n  containedPrimary: {\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.primary.main\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"[contained | fab]\"` and `color=\"secondary\"`. */\n  containedSecondary: {\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.secondary.main\n      }\n    }\n  },\n\n  /* Styles applied to the root element for backwards compatibility with legacy variant naming. */\n  raised: {},\n  // legacy\n\n  /* Styles applied to the root element for backwards compatibility with legacy variant naming. */\n  raisedPrimary: {},\n  // legacy\n\n  /* Styles applied to the root element for backwards compatibility with legacy variant naming. */\n  raisedSecondary: {},\n  // legacy\n\n  /* Styles applied to the root element if `variant=\"[fab | extendedFab]\"`. */\n  fab: {\n    borderRadius: '50%',\n    padding: 0,\n    minWidth: 0,\n    width: 56,\n    height: 56,\n    boxShadow: theme.shadows[6],\n    '&:active': {\n      boxShadow: theme.shadows[12]\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"extendedFab\"`. */\n  extendedFab: {\n    borderRadius: 48 / 2,\n    padding: '0 16px',\n    width: 'auto',\n    minWidth: 48,\n    height: 48\n  },\n\n  /* Styles applied to the ButtonBase root element if the button is keyboard focused. */\n  focusVisible: {},\n\n  /* Styles applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit',\n    borderColor: 'currentColor'\n  },\n\n  /* Styles applied to the root element if `mini={true}` & `variant=\"[fab | extendedFab]\"`. */\n  mini: {\n    width: 40,\n    height: 40\n  },\n\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    padding: '4px 8px',\n    minWidth: 64,\n    fontSize: theme.typography.pxToRem(13)\n  },\n\n  /* Styles applied to the root element if `size=\"large\"`. */\n  sizeLarge: {\n    padding: '8px 24px',\n    fontSize: theme.typography.pxToRem(15)\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  }\n});\n\nfunction Button(props) {\n  const children = props.children,\n        classes = props.classes,\n        classNameProp = props.className,\n        color = props.color,\n        disabled = props.disabled,\n        disableFocusRipple = props.disableFocusRipple,\n        focusVisibleClassName = props.focusVisibleClassName,\n        fullWidth = props.fullWidth,\n        mini = props.mini,\n        size = props.size,\n        variant = props.variant,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"color\", \"disabled\", \"disableFocusRipple\", \"focusVisibleClassName\", \"fullWidth\", \"mini\", \"size\", \"variant\"]);\n\n  const fab = variant === 'fab' || variant === 'extendedFab';\n  const contained = variant === 'contained' || variant === 'raised';\n  const text = variant === 'text' || variant === 'flat';\n  const className = classNames(classes.root, {\n    [classes.fab]: fab,\n    [classes.mini]: fab && mini,\n    [classes.extendedFab]: variant === 'extendedFab',\n    [classes.text]: text,\n    [classes.textPrimary]: text && color === 'primary',\n    [classes.textSecondary]: text && color === 'secondary',\n    [classes.flat]: text,\n    [classes.flatPrimary]: text && color === 'primary',\n    [classes.flatSecondary]: text && color === 'secondary',\n    [classes.contained]: contained || fab,\n    [classes.containedPrimary]: (contained || fab) && color === 'primary',\n    [classes.containedSecondary]: (contained || fab) && color === 'secondary',\n    [classes.raised]: contained || fab,\n    [classes.raisedPrimary]: (contained || fab) && color === 'primary',\n    [classes.raisedSecondary]: (contained || fab) && color === 'secondary',\n    [classes.outlined]: variant === 'outlined',\n    [classes.outlinedPrimary]: variant === 'outlined' && color === 'primary',\n    [classes.outlinedSecondary]: variant === 'outlined' && color === 'secondary',\n    [classes[\"size\".concat(capitalize(size))]]: size !== 'medium',\n    [classes.disabled]: disabled,\n    [classes.fullWidth]: fullWidth,\n    [classes.colorInherit]: color === 'inherit'\n  }, classNameProp);\n  return React.createElement(ButtonBase, _extends({\n    className: className,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: classNames(classes.focusVisible, focusVisibleClassName)\n  }, other), React.createElement(\"span\", {\n    className: classes.label\n  }, children));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: componentPropType,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n\n  /**\n   * If `true`, and `variant` is `'fab'`, will use mini floating action button styling.\n   */\n  mini: PropTypes.bool,\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.string,\n\n  /**\n   * The variant to use.\n   * __WARNING__: `flat` and `raised` are deprecated.\n   * Instead use `text` and `contained` respectively.\n   * `fab` and `extendedFab` are deprecated.\n   * Instead use `<Fab>` and `<Fab variant=\"extended\">`\n   */\n  variant: chainPropTypes(PropTypes.oneOf(['text', 'outlined', 'contained', 'fab', 'extendedFab', 'flat', 'raised']), props => {\n    if (props.variant === 'flat') {\n      return new Error('Material-UI: the `flat` variant will be removed in the next major release. ' + '`text` is equivalent and should be used instead.');\n    }\n\n    if (props.variant === 'raised') {\n      return new Error('Material-UI: the `raised` variant will be removed in the next major release. ' + '`contained` is equivalent and should be used instead.');\n    }\n\n    if (props.variant === 'fab') {\n      return new Error('Material-UI: the `fab` variant will be removed in the next major release. ' + 'The `<Fab>` component is equivalent and should be used instead.');\n    }\n\n    if (props.variant === 'extendedFab') {\n      return new Error('Material-UI: the `fab` variant will be removed in the next major release. ' + 'The `<Fab>` component with `variant=\"extended\"` is equivalent ' + 'and should be used instead.');\n    }\n\n    return null;\n  })\n} : void 0;\nButton.defaultProps = {\n  color: 'default',\n  component: 'button',\n  disabled: false,\n  disableFocusRipple: false,\n  fullWidth: false,\n  mini: false,\n  size: 'medium',\n  type: 'button',\n  variant: 'text'\n};\nexport default withStyles(styles, {\n  name: 'MuiButton'\n})(Button);","map":null,"metadata":{},"sourceType":"module"}
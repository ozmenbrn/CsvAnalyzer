{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { componentPropType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { capitalize } from '../utils/helpers';\nimport deprecatedPropType from '../utils/deprecatedPropType';\nimport { darken, fade, lighten } from '../styles/colorManipulator';\nimport TableContext from '../Table/TableContext';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-cell',\n    verticalAlign: 'inherit',\n    // Workaround for a rendering bug with spanned columns in Chrome 62.0.\n    // Removes the alpha (sets it to 1), and lightens or darkens the theme color.\n    borderBottom: \"1px solid\\n    \".concat(theme.palette.type === 'light' ? lighten(fade(theme.palette.divider, 1), 0.88) : darken(fade(theme.palette.divider, 1), 0.68)),\n    textAlign: 'left',\n    padding: '4px 56px 4px 24px',\n    '&:last-child': {\n      paddingRight: 24\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"head\"` or `context.table.head`. */\n  head: {\n    color: theme.palette.text.secondary,\n    fontSize: theme.typography.pxToRem(12),\n    fontWeight: theme.typography.fontWeightMedium\n  },\n\n  /* Styles applied to the root element if `variant=\"body\"` or `context.table.body`. */\n  body: {\n    color: theme.palette.text.primary,\n    fontSize: theme.typography.pxToRem(13),\n    fontWeight: theme.typography.fontWeightRegular\n  },\n\n  /* Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`. */\n  footer: {\n    borderBottom: 0,\n    color: theme.palette.text.secondary,\n    fontSize: theme.typography.pxToRem(12)\n  },\n\n  /* Styles applied to the root element if `numeric={true}`. */\n  numeric: {\n    textAlign: 'right',\n    flexDirection: 'row-reverse' // can be dynamically inherited at runtime by contents\n\n  },\n\n  /* Styles applied to the root element if `padding=\"dense\"`. */\n  paddingDense: {\n    paddingRight: 24\n  },\n\n  /* Styles applied to the root element if `padding=\"checkbox\"`. */\n  paddingCheckbox: {\n    padding: '0 12px',\n    '&:last-child': {\n      paddingRight: 12\n    }\n  },\n\n  /* Styles applied to the root element if `padding=\"none\"`. */\n  paddingNone: {\n    padding: 0,\n    '&:last-child': {\n      padding: 0\n    }\n  },\n\n  /* Styles applied to the root element if `align=\"left\"`. */\n  alignLeft: {\n    textAlign: 'left'\n  },\n\n  /* Styles applied to the root element if `align=\"center\"`. */\n  alignCenter: {\n    textAlign: 'center'\n  },\n\n  /* Styles applied to the root element if `align=\"right\"`. */\n  alignRight: {\n    textAlign: 'right',\n    flexDirection: 'row-reverse'\n  },\n\n  /* Styles applied to the root element if `align=\"justify\"`. */\n  alignJustify: {\n    textAlign: 'justify'\n  }\n});\n\nfunction TableCell(props) {\n  const align = props.align,\n        children = props.children,\n        classes = props.classes,\n        classNameProp = props.className,\n        component = props.component,\n        sortDirection = props.sortDirection,\n        _props$numeric = props.numeric,\n        numeric = _props$numeric === void 0 ? false : _props$numeric,\n        paddingProp = props.padding,\n        scopeProp = props.scope,\n        variant = props.variant,\n        other = _objectWithoutPropertiesLoose(props, [\"align\", \"children\", \"classes\", \"className\", \"component\", \"sortDirection\", \"numeric\", \"padding\", \"scope\", \"variant\"]);\n\n  return React.createElement(TableContext.Consumer, null, table => React.createElement(Tablelvl2Context.Consumer, null, tablelvl2 => {\n    let Component;\n\n    if (component) {\n      Component = component;\n    } else {\n      Component = tablelvl2 && tablelvl2.variant === 'head' ? 'th' : 'td';\n    }\n\n    let scope = scopeProp;\n\n    if (!scope && tablelvl2 && tablelvl2.variant === 'head') {\n      scope = 'col';\n    }\n\n    const padding = paddingProp || (table && table.padding ? table.padding : 'default');\n    const className = classNames(classes.root, {\n      [classes.head]: variant ? variant === 'head' : tablelvl2 && tablelvl2.variant === 'head',\n      [classes.body]: variant ? variant === 'body' : tablelvl2 && tablelvl2.variant === 'body',\n      [classes.footer]: variant ? variant === 'footer' : tablelvl2 && tablelvl2.variant === 'footer',\n      [classes[\"align\".concat(capitalize(align))]]: align !== 'inherit',\n      [classes.numeric]: numeric,\n      [classes[\"padding\".concat(capitalize(padding))]]: padding !== 'default'\n    }, classNameProp);\n    let ariaSort = null;\n\n    if (sortDirection) {\n      ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';\n    }\n\n    return React.createElement(Component, _extends({\n      className: className,\n      \"aria-sort\": ariaSort,\n      scope: scope\n    }, other), children);\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? TableCell.propTypes = {\n  /**\n   * Set the text-align on the table cell content.\n   *\n   * Monetary or generally number fields **should be right aligned** as that allows\n   * you to add them up quickly in your head without having to worry about decimals.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The table cell contents.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: componentPropType,\n\n  /**\n   * If `true`, content will align to the right.\n   */\n  numeric: deprecatedPropType(PropTypes.bool, 'Instead, use the `align` property.'),\n\n  /**\n   * Sets the padding applied to the cell.\n   * By default, the Table parent component set the value.\n   */\n  padding: PropTypes.oneOf(['default', 'checkbox', 'dense', 'none']),\n\n  /**\n   * Set scope attribute.\n   */\n  scope: PropTypes.string,\n\n  /**\n   * Set aria-sort direction.\n   */\n  sortDirection: PropTypes.oneOf(['asc', 'desc', false]),\n\n  /**\n   * Specify the cell type.\n   * By default, the TableHead, TableBody or TableFooter parent component set the value.\n   */\n  variant: PropTypes.oneOf(['head', 'body', 'footer'])\n} : void 0;\nTableCell.defaultProps = {\n  align: 'inherit'\n};\nexport default withStyles(styles, {\n  name: 'MuiTableCell'\n})(TableCell);","map":null,"metadata":{},"sourceType":"module"}
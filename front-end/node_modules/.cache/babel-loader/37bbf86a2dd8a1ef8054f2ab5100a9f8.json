{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nclass NoSsr extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.mounted = false;\n    this.state = {\n      mounted: false\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n\n    if (this.props.defer) {\n      // Wondering why we use two RAFs? Check this video out:\n      // https://www.youtube.com/watch?v=cCOL7MC4Pl0\n      //\n      // The componentDidMount() method is called after the DOM nodes are inserted.\n      // The UI might not have rendering the changes. We request a frame.\n      requestAnimationFrame(() => {\n        // The browser should be about to render the DOM nodes\n        // that React committed at this point.\n        // We don't want to interrupt. Let's wait the next frame.\n        requestAnimationFrame(() => {\n          // The UI is up-to-date at this point.\n          // We can continue rendering the children.\n          if (this.mounted) {\n            this.setState({\n              mounted: true\n            });\n          }\n        });\n      });\n    } else {\n      this.setState({\n        mounted: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          fallback = _this$props.fallback;\n    return this.state.mounted ? children : fallback;\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes = {\n  children: PropTypes.node.isRequired,\n\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   */\n  defer: PropTypes.bool,\n\n  /**\n   * The fallback content to display.\n   */\n  fallback: PropTypes.node\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? NoSsr.propTypes = exactProp(NoSsr.propTypes) : void 0;\n}\n\nNoSsr.defaultProps = {\n  defer: false,\n  fallback: null\n};\nexport default NoSsr;","map":null,"metadata":{},"sourceType":"module"}
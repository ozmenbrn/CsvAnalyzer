{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { componentPropType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport StepIcon from '../StepIcon';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    '&$alternativeLabel': {\n      flexDirection: 'column'\n    },\n    '&$disabled': {\n      cursor: 'default'\n    }\n  },\n\n  /* Styles applied to the root element if `orientation=\"horizontal\". */\n  horizontal: {},\n\n  /* Styles applied to the root element if `orientation=\"vertical\". */\n  vertical: {},\n\n  /* Styles applied to the `Typography` component which wraps `children`. */\n  label: {\n    color: theme.palette.text.secondary,\n    '&$active': {\n      color: theme.palette.text.primary,\n      fontWeight: 500\n    },\n    '&$completed': {\n      color: theme.palette.text.primary,\n      fontWeight: 500\n    },\n    '&$alternativeLabel': {\n      textAlign: 'center',\n      marginTop: 16\n    },\n    '&$error': {\n      color: theme.palette.error.main\n    }\n  },\n\n  /* Styles applied to the `Typography` component if `active={true}`. */\n  active: {},\n\n  /* Styles applied to the `Typography` component if `completed={true}`. */\n  completed: {},\n\n  /* Styles applied to the root element and `Typography` component if `error={true}`. */\n  error: {},\n\n  /* Styles applied to the root element and `Typography` component if `disabled={true}`. */\n  disabled: {},\n\n  /* Styles applied to the `icon` container element. */\n  iconContainer: {\n    flexShrink: 0,\n    // Fix IE 11 issue\n    display: 'flex',\n    paddingRight: 8,\n    '&$alternativeLabel': {\n      paddingRight: 0\n    }\n  },\n\n  /* Styles applied to the root & icon container and `Typography` if `alternativeLabel={true}`. */\n  alternativeLabel: {},\n\n  /* Styles applied to the container element which wraps `Typography` and `optional`. */\n  labelContainer: {\n    width: '100%'\n  }\n});\n\nfunction StepLabel(props) {\n  const active = props.active,\n        alternativeLabel = props.alternativeLabel,\n        children = props.children,\n        classes = props.classes,\n        classNameProp = props.className,\n        completed = props.completed,\n        disabled = props.disabled,\n        error = props.error,\n        icon = props.icon,\n        optional = props.optional,\n        orientation = props.orientation,\n        StepIconComponentProp = props.StepIconComponent,\n        StepIconProps = props.StepIconProps,\n        other = _objectWithoutPropertiesLoose(props, [\"active\", \"alternativeLabel\", \"children\", \"classes\", \"className\", \"completed\", \"disabled\", \"error\", \"icon\", \"last\", \"optional\", \"orientation\", \"StepIconComponent\", \"StepIconProps\"]);\n\n  let StepIconComponent = StepIconComponentProp;\n\n  if (icon && !StepIconComponent) {\n    StepIconComponent = StepIcon;\n  }\n\n  return React.createElement(\"span\", _extends({\n    className: classNames(classes.root, classes[orientation], {\n      [classes.disabled]: disabled,\n      [classes.alternativeLabel]: alternativeLabel,\n      [classes.error]: error\n    }, classNameProp)\n  }, other), icon || StepIconComponent ? React.createElement(\"span\", {\n    className: classNames(classes.iconContainer, {\n      [classes.alternativeLabel]: alternativeLabel\n    })\n  }, React.createElement(StepIconComponent, _extends({\n    completed: completed,\n    active: active,\n    error: error,\n    icon: icon\n  }, StepIconProps))) : null, React.createElement(\"span\", {\n    className: classes.labelContainer\n  }, React.createElement(Typography, {\n    component: \"span\",\n    className: classNames(classes.label, {\n      [classes.alternativeLabel]: alternativeLabel,\n      [classes.completed]: completed,\n      [classes.active]: active,\n      [classes.error]: error\n    })\n  }, children), optional));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? StepLabel.propTypes = {\n  /**\n   * @ignore\n   * Sets the step as active. Is passed to child components.\n   */\n  active: PropTypes.bool,\n\n  /**\n   * @ignore\n   * Set internally by Stepper when it's supplied with the alternativeLabel property.\n   */\n  alternativeLabel: PropTypes.bool,\n\n  /**\n   * In most cases will simply be a string containing a title for the label.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   * Mark the step as completed. Is passed to child components.\n   */\n  completed: PropTypes.bool,\n\n  /**\n   * Mark the step as disabled, will also disable the button if\n   * `StepLabelButton` is a child of `StepLabel`. Is passed to child components.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Mark the step as failed.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Override the default icon.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  last: PropTypes.bool,\n\n  /**\n   * The optional node to display.\n   */\n  optional: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * The component to render in place of the [`StepIcon`](/api/step-icon/).\n   */\n  StepIconComponent: componentPropType,\n\n  /**\n   * Properties applied to the [`StepIcon`](/api/step-icon/) element.\n   */\n  StepIconProps: PropTypes.object\n} : void 0;\nStepLabel.defaultProps = {\n  active: false,\n  alternativeLabel: false,\n  completed: false,\n  disabled: false,\n  error: false,\n  last: false,\n  orientation: 'horizontal'\n};\nStepLabel.muiName = 'StepLabel';\nexport default withStyles(styles, {\n  name: 'MuiStepLabel'\n})(StepLabel);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport { componentPropType } from '@material-ui/utils';\nimport Menu from '../Menu/Menu';\nimport { isFilled } from '../InputBase/utils';\nimport { setRef } from '../utils/reactHelpers';\n\nfunction areEqualValues(a, b) {\n  if (typeof b === 'object' && b !== null) {\n    return a === b;\n  }\n\n  return String(a) === String(b);\n}\n/**\n * @ignore - internal component.\n */\n\n\nclass SelectInput extends React.Component {\n  constructor(props) {\n    super();\n    this.ignoreNextBlur = false;\n\n    this.update = ({\n      event,\n      open\n    }) => {\n      if (this.isOpenControlled) {\n        if (open) {\n          this.props.onOpen(event);\n        } else {\n          this.props.onClose(event);\n        }\n\n        return;\n      }\n\n      this.setState({\n        // Perform the layout computation outside of the render method.\n        menuMinWidth: this.props.autoWidth ? null : this.displayRef.clientWidth,\n        open\n      });\n    };\n\n    this.handleClick = event => {\n      // Opening the menu is going to blur the. It will be focused back when closed.\n      this.ignoreNextBlur = true;\n      this.update({\n        open: true,\n        event\n      });\n    };\n\n    this.handleClose = event => {\n      this.update({\n        open: false,\n        event\n      });\n    };\n\n    this.handleItemClick = child => event => {\n      if (!this.props.multiple) {\n        this.update({\n          open: false,\n          event\n        });\n      }\n\n      const _this$props2 = this.props,\n            onChange = _this$props2.onChange,\n            name = _this$props2.name;\n\n      if (onChange) {\n        let value;\n\n        if (this.props.multiple) {\n          value = Array.isArray(this.props.value) ? [...this.props.value] : [];\n          const itemIndex = value.indexOf(child.props.value);\n\n          if (itemIndex === -1) {\n            value.push(child.props.value);\n          } else {\n            value.splice(itemIndex, 1);\n          }\n        } else {\n          value = child.props.value;\n        }\n\n        event.persist();\n        event.target = {\n          value,\n          name\n        };\n        onChange(event, child);\n      }\n    };\n\n    this.handleBlur = event => {\n      if (this.ignoreNextBlur === true) {\n        // The parent components are relying on the bubbling of the event.\n        event.stopPropagation();\n        this.ignoreNextBlur = false;\n        return;\n      }\n\n      if (this.props.onBlur) {\n        const _this$props3 = this.props,\n              value = _this$props3.value,\n              name = _this$props3.name;\n        event.persist();\n        event.target = {\n          value,\n          name\n        };\n        this.props.onBlur(event);\n      }\n    };\n\n    this.handleKeyDown = event => {\n      if (this.props.readOnly) {\n        return;\n      }\n\n      if ([' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by\n      // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html\n      'Enter'].indexOf(event.key) !== -1) {\n        event.preventDefault(); // Opening the menu is going to blur the. It will be focused back when closed.\n\n        this.ignoreNextBlur = true;\n        this.update({\n          open: true,\n          event\n        });\n      }\n    };\n\n    this.handleDisplayRef = ref => {\n      this.displayRef = ref;\n    };\n\n    this.handleInputRef = ref => {\n      const inputRef = this.props.inputRef;\n\n      if (!inputRef) {\n        return;\n      }\n\n      const nodeProxy = {\n        node: ref,\n        // By pass the native input as we expose a rich object (array).\n        value: this.props.value,\n        focus: () => {\n          this.displayRef.focus();\n        }\n      };\n      setRef(inputRef, nodeProxy);\n    };\n\n    this.isOpenControlled = props.open !== undefined;\n    this.state = {\n      menuMinWidth: null,\n      open: false\n    };\n  }\n\n  componentDidMount() {\n    if (this.isOpenControlled && this.props.open) {\n      // Focus the display node so the focus is restored on this element once\n      // the menu is closed.\n      this.displayRef.focus(); // Rerender with the resolve `displayRef` reference.\n\n      this.forceUpdate();\n    }\n\n    if (this.props.autoFocus) {\n      this.displayRef.focus();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          autoWidth = _this$props.autoWidth,\n          children = _this$props.children,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          disabled = _this$props.disabled,\n          displayEmpty = _this$props.displayEmpty,\n          IconComponent = _this$props.IconComponent,\n          _this$props$MenuProps = _this$props.MenuProps,\n          MenuProps = _this$props$MenuProps === void 0 ? {} : _this$props$MenuProps,\n          multiple = _this$props.multiple,\n          name = _this$props.name,\n          onFocus = _this$props.onFocus,\n          openProp = _this$props.open,\n          readOnly = _this$props.readOnly,\n          renderValue = _this$props.renderValue,\n          SelectDisplayProps = _this$props.SelectDisplayProps,\n          tabIndexProp = _this$props.tabIndex,\n          _this$props$type = _this$props.type,\n          type = _this$props$type === void 0 ? 'hidden' : _this$props$type,\n          value = _this$props.value,\n          variant = _this$props.variant,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"autoWidth\", \"children\", \"classes\", \"className\", \"disabled\", \"displayEmpty\", \"IconComponent\", \"inputRef\", \"MenuProps\", \"multiple\", \"name\", \"onBlur\", \"onChange\", \"onClose\", \"onFocus\", \"onOpen\", \"open\", \"readOnly\", \"renderValue\", \"required\", \"SelectDisplayProps\", \"tabIndex\", \"type\", \"value\", \"variant\"]);\n\n    const open = this.isOpenControlled && this.displayRef ? openProp : this.state.open;\n    delete other['aria-invalid'];\n    let display;\n    let displaySingle = '';\n    const displayMultiple = [];\n    let computeDisplay = false; // No need to display any value if the field is empty.\n\n    if (isFilled(this.props) || displayEmpty) {\n      if (renderValue) {\n        display = renderValue(value);\n      } else {\n        computeDisplay = true;\n      }\n    }\n\n    const items = React.Children.map(children, child => {\n      if (!React.isValidElement(child)) {\n        return null;\n      }\n\n      process.env.NODE_ENV !== \"production\" ? warning(child.type !== React.Fragment, [\"Material-UI: the Select component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n')) : void 0;\n      let selected;\n\n      if (multiple) {\n        if (!Array.isArray(value)) {\n          throw new Error('Material-UI: the `value` property must be an array ' + 'when using the `Select` component with `multiple`.');\n        }\n\n        selected = value.some(v => areEqualValues(v, child.props.value));\n\n        if (selected && computeDisplay) {\n          displayMultiple.push(child.props.children);\n        }\n      } else {\n        selected = areEqualValues(value, child.props.value);\n\n        if (selected && computeDisplay) {\n          displaySingle = child.props.children;\n        }\n      }\n\n      return React.cloneElement(child, {\n        onClick: this.handleItemClick(child),\n        role: 'option',\n        selected,\n        value: undefined,\n        // The value is most likely not a valid HTML attribute.\n        'data-value': child.props.value // Instead, we provide it as a data attribute.\n\n      });\n    });\n\n    if (computeDisplay) {\n      display = multiple ? displayMultiple.join(', ') : displaySingle;\n    } // Avoid performing a layout computation in the render method.\n\n\n    let menuMinWidth = this.state.menuMinWidth;\n\n    if (!autoWidth && this.isOpenControlled && this.displayRef) {\n      menuMinWidth = this.displayRef.clientWidth;\n    }\n\n    let tabIndex;\n\n    if (typeof tabIndexProp !== 'undefined') {\n      tabIndex = tabIndexProp;\n    } else {\n      tabIndex = disabled ? null : 0;\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.root\n    }, React.createElement(\"div\", _extends({\n      className: classNames(classes.select, classes.selectMenu, {\n        [classes.disabled]: disabled,\n        [classes.filled]: variant === 'filled',\n        [classes.outlined]: variant === 'outlined'\n      }, className),\n      ref: this.handleDisplayRef,\n      \"aria-pressed\": open ? 'true' : 'false',\n      tabIndex: tabIndex,\n      role: \"button\",\n      \"aria-owns\": open ? \"menu-\".concat(name || '') : undefined,\n      \"aria-haspopup\": \"true\",\n      onKeyDown: this.handleKeyDown,\n      onBlur: this.handleBlur,\n      onClick: disabled || readOnly ? null : this.handleClick,\n      onFocus: onFocus // The id can help with end-to-end testing automation.\n      ,\n      id: name ? \"select-\".concat(name) : undefined\n    }, SelectDisplayProps), display || React.createElement(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: '&#8203;'\n      }\n    })), React.createElement(\"input\", _extends({\n      value: Array.isArray(value) ? value.join(',') : value,\n      name: name,\n      ref: this.handleInputRef,\n      type: type\n    }, other)), React.createElement(IconComponent, {\n      className: classes.icon\n    }), React.createElement(Menu, _extends({\n      id: \"menu-\".concat(name || ''),\n      anchorEl: this.displayRef,\n      open: open,\n      onClose: this.handleClose\n    }, MenuProps, {\n      MenuListProps: _extends({\n        role: 'listbox',\n        disableListWrap: true\n      }, MenuProps.MenuListProps),\n      PaperProps: _extends({}, MenuProps.PaperProps, {\n        style: _extends({\n          minWidth: menuMinWidth\n        }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)\n      })\n    }), items));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? SelectInput.propTypes = {\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If true, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<MenuItem>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The CSS class name of the select element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the select will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the selected item is displayed even if its value is empty.\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: componentPropType,\n\n  /**\n   * Use that property to pass a ref callback to the native select element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Properties applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If true, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Name attribute of the `select` or hidden `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   * @param {object} [child] The react element that was selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {*} value The `value` provided to the component.\n   * @returns {ReactElement}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Properties applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.string,\n\n  /**\n   * The input value.\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.object, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.object]))]).isRequired,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default SelectInput;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent List\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport warning from 'warning';\nimport ownerDocument from '../utils/ownerDocument';\nimport List from '../List';\n\nclass MenuList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentTabIndex: null\n    };\n\n    this.handleBlur = event => {\n      this.blurTimer = setTimeout(() => {\n        if (this.listRef) {\n          const list = this.listRef;\n          const currentFocus = ownerDocument(list).activeElement;\n\n          if (!list.contains(currentFocus)) {\n            this.resetTabIndex();\n          }\n        }\n      }, 30);\n\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n    };\n\n    this.handleKeyDown = event => {\n      const list = this.listRef;\n      const key = event.key;\n      const currentFocus = ownerDocument(list).activeElement;\n\n      if ((key === 'ArrowUp' || key === 'ArrowDown') && (!currentFocus || currentFocus && !list.contains(currentFocus))) {\n        if (this.selectedItemRef) {\n          this.selectedItemRef.focus();\n        } else {\n          list.firstChild.focus();\n        }\n      } else if (key === 'ArrowDown') {\n        event.preventDefault();\n\n        if (currentFocus.nextElementSibling) {\n          currentFocus.nextElementSibling.focus();\n        } else if (!this.props.disableListWrap) {\n          list.firstChild.focus();\n        }\n      } else if (key === 'ArrowUp') {\n        event.preventDefault();\n\n        if (currentFocus.previousElementSibling) {\n          currentFocus.previousElementSibling.focus();\n        } else if (!this.props.disableListWrap) {\n          list.lastChild.focus();\n        }\n      } else if (key === 'Home') {\n        event.preventDefault();\n        list.firstChild.focus();\n      } else if (key === 'End') {\n        event.preventDefault();\n        list.lastChild.focus();\n      }\n\n      if (this.props.onKeyDown) {\n        this.props.onKeyDown(event);\n      }\n    };\n\n    this.handleItemFocus = event => {\n      const list = this.listRef;\n\n      if (list) {\n        for (let i = 0; i < list.children.length; i += 1) {\n          if (list.children[i] === event.currentTarget) {\n            this.setTabIndex(i);\n            break;\n          }\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.resetTabIndex();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.blurTimer);\n  }\n\n  setTabIndex(index) {\n    this.setState({\n      currentTabIndex: index\n    });\n  }\n\n  focus() {\n    const currentTabIndex = this.state.currentTabIndex;\n    const list = this.listRef;\n\n    if (!list || !list.children || !list.firstChild) {\n      return;\n    }\n\n    if (currentTabIndex && currentTabIndex >= 0) {\n      list.children[currentTabIndex].focus();\n    } else {\n      list.firstChild.focus();\n    }\n  }\n\n  resetTabIndex() {\n    const list = this.listRef;\n    const currentFocus = ownerDocument(list).activeElement;\n    const items = [];\n\n    for (let i = 0; i < list.children.length; i += 1) {\n      items.push(list.children[i]);\n    }\n\n    const currentFocusIndex = items.indexOf(currentFocus);\n\n    if (currentFocusIndex !== -1) {\n      return this.setTabIndex(currentFocusIndex);\n    }\n\n    if (this.selectedItemRef) {\n      return this.setTabIndex(items.indexOf(this.selectedItemRef));\n    }\n\n    return this.setTabIndex(0);\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"className\", \"onBlur\", \"onKeyDown\", \"disableListWrap\"]);\n\n    return React.createElement(List, _extends({\n      role: \"menu\",\n      ref: ref => {\n        this.listRef = ReactDOM.findDOMNode(ref);\n      },\n      className: className,\n      onKeyDown: this.handleKeyDown,\n      onBlur: this.handleBlur\n    }, other), React.Children.map(children, (child, index) => {\n      if (!React.isValidElement(child)) {\n        return null;\n      }\n\n      process.env.NODE_ENV !== \"production\" ? warning(child.type !== React.Fragment, [\"Material-UI: the MenuList component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n')) : void 0;\n      return React.cloneElement(child, {\n        tabIndex: index === this.state.currentTabIndex ? 0 : -1,\n        ref: child.props.selected ? ref => {\n          this.selectedItemRef = ReactDOM.findDOMNode(ref);\n        } : undefined,\n        onFocus: this.handleItemFocus\n      });\n    }));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? MenuList.propTypes = {\n  /**\n   * MenuList contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the menu items will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func\n} : void 0;\nMenuList.defaultProps = {\n  disableListWrap: false\n};\nexport default MenuList;","map":null,"metadata":{},"sourceType":"module"}
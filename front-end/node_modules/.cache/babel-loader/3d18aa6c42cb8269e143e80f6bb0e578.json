{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent Paper\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport Collapse from '../Collapse';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nimport { isMuiElement } from '../utils/reactHelpers';\nexport const styles = theme => {\n  const transition = {\n    duration: theme.transitions.duration.shortest\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      transition: theme.transitions.create(['margin'], transition),\n      '&:before': {\n        position: 'absolute',\n        left: 0,\n        top: -1,\n        right: 0,\n        height: 1,\n        content: '\"\"',\n        opacity: 1,\n        backgroundColor: theme.palette.divider,\n        transition: theme.transitions.create(['opacity', 'background-color'], transition)\n      },\n      '&:first-child': {\n        '&:before': {\n          display: 'none'\n        }\n      },\n      '&$expanded + &': {\n        '&:before': {\n          display: 'none'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: 0,\n      '&:first-child': {\n        borderTopLeftRadius: theme.shape.borderRadius,\n        borderTopRightRadius: theme.shape.borderRadius\n      },\n      '&:last-child': {\n        borderBottomLeftRadius: theme.shape.borderRadius,\n        borderBottomRightRadius: theme.shape.borderRadius,\n        // Fix a rendering issue on Edge\n        '@supports (-ms-ime-align: auto)': {\n          borderBottomLeftRadius: 0,\n          borderBottomRightRadius: 0\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `expanded={true}`. */\n    expanded: {\n      margin: '16px 0',\n      '&:first-child': {\n        marginTop: 0\n      },\n      '&:last-child': {\n        marginBottom: 0\n      },\n      '&:before': {\n        opacity: 0\n      }\n    },\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {\n      backgroundColor: theme.palette.action.disabledBackground\n    }\n  };\n};\n\nclass ExpansionPanel extends React.Component {\n  constructor(props) {\n    super();\n\n    this.handleChange = event => {\n      const expanded = this.isControlled ? this.props.expanded : this.state.expanded;\n\n      if (!this.isControlled) {\n        this.setState({\n          expanded: !expanded\n        });\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(event, !expanded);\n      }\n    };\n\n    this.isControlled = props.expanded != null;\n    this.state = {};\n\n    if (!this.isControlled) {\n      // not controlled, use internal state\n      this.state.expanded = props.defaultExpanded !== undefined ? props.defaultExpanded : false;\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          childrenProp = _this$props.children,\n          classes = _this$props.classes,\n          classNameProp = _this$props.className,\n          CollapsePropsProp = _this$props.CollapseProps,\n          disabled = _this$props.disabled,\n          expandedProp = _this$props.expanded,\n          square = _this$props.square,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"classes\", \"className\", \"CollapseProps\", \"defaultExpanded\", \"disabled\", \"expanded\", \"onChange\", \"square\"]);\n\n    const expanded = this.isControlled ? expandedProp : this.state.expanded;\n    let summary = null;\n    const children = React.Children.map(childrenProp, child => {\n      if (!React.isValidElement(child)) {\n        return null;\n      }\n\n      process.env.NODE_ENV !== \"production\" ? warning(child.type !== React.Fragment, [\"Material-UI: the ExpansionPanel component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n')) : void 0;\n\n      if (isMuiElement(child, ['ExpansionPanelSummary'])) {\n        summary = React.cloneElement(child, {\n          disabled,\n          expanded,\n          onChange: this.handleChange\n        });\n        return null;\n      }\n\n      return child;\n    });\n    const CollapseProps = !expanded ? {\n      'aria-hidden': 'true'\n    } : null;\n    return React.createElement(Paper, _extends({\n      className: classNames(classes.root, {\n        [classes.expanded]: expanded,\n        [classes.disabled]: disabled,\n        [classes.rounded]: !square\n      }, classNameProp),\n      elevation: 1,\n      square: square\n    }, other), summary, React.createElement(Collapse, _extends({\n      in: expanded,\n      timeout: \"auto\"\n    }, CollapseProps, CollapsePropsProp), children));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ExpansionPanel.propTypes = {\n  /**\n   * The content of the expansion panel.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Properties applied to the [`Collapse`](/api/collapse/) element.\n   */\n  CollapseProps: PropTypes.object,\n\n  /**\n   * If `true`, expands the panel by default.\n   */\n  defaultExpanded: PropTypes.bool,\n\n  /**\n   * If `true`, the panel will be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, expands the panel, otherwise collapse it.\n   * Setting this prop enables control over the panel.\n   */\n  expanded: PropTypes.bool,\n\n  /**\n   * Callback fired when the expand/collapse state is changed.\n   *\n   * @param {object} event The event source of the callback\n   * @param {boolean} expanded The `expanded` state of the panel\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  square: PropTypes.bool\n} : void 0;\nExpansionPanel.defaultProps = {\n  defaultExpanded: false,\n  disabled: false,\n  square: false\n};\nexport default withStyles(styles, {\n  name: 'MuiExpansionPanel'\n})(ExpansionPanel);","map":null,"metadata":{},"sourceType":"module"}
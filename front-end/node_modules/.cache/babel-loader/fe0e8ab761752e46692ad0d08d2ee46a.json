{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport { exactProp } from '@material-ui/utils';\n\nfunction getContainer(container, defaultContainer) {\n  container = typeof container === 'function' ? container() : container;\n  return ReactDOM.findDOMNode(container) || defaultContainer;\n}\n\nfunction getOwnerDocument(element) {\n  return ownerDocument(ReactDOM.findDOMNode(element));\n}\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\n\nclass Portal extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getMountNode = () => this.mountNode;\n  }\n\n  componentDidMount() {\n    this.setMountNode(this.props.container); // Only rerender if needed\n\n    if (!this.props.disablePortal) {\n      this.forceUpdate(this.props.onRendered);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.container !== this.props.container || prevProps.disablePortal !== this.props.disablePortal) {\n      this.setMountNode(this.props.container); // Only rerender if needed\n\n      if (!this.props.disablePortal) {\n        this.forceUpdate(() => {\n          if (this.props.onRendered) {\n            // This might be triggered earlier than the componentDidUpdate of a parent element.\n            // We need to account for it.\n            clearTimeout(this.renderedTimer);\n            this.renderedTimer = setTimeout(this.props.onRendered);\n          }\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.mountNode = null;\n    clearTimeout(this.renderedTimer);\n  }\n\n  setMountNode(container) {\n    if (this.props.disablePortal) {\n      this.mountNode = ReactDOM.findDOMNode(this).parentElement;\n      return;\n    }\n\n    this.mountNode = getContainer(container, getOwnerDocument(this).body);\n  }\n  /**\n   * @public\n   */\n\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          disablePortal = _this$props.disablePortal;\n\n    if (disablePortal) {\n      return children;\n    }\n\n    return this.mountNode ? ReactDOM.createPortal(children, this.mountNode) : null;\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes = {\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   */\n  onRendered: PropTypes.func\n} : void 0;\nPortal.defaultProps = {\n  disablePortal: false\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? Portal.propTypes = exactProp(Portal.propTypes) : void 0;\n}\n\nexport default Portal;","map":null,"metadata":{},"sourceType":"module"}
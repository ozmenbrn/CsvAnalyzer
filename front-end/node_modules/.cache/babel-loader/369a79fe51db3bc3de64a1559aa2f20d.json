{"ast":null,"code":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar typpy = require(\"typpy\"),\n    Deffy = require(\"deffy\");\n\nvar Ul = module.exports = {\n  /**\n   * merge\n   * One level merge. Faster than `deepMerge`.\n   *\n   * @name merge\n   * @function\n   * @param dst {Object} The destination object.\n   * @param src {Object} The source object (usually defaults).\n   * @return {Object} The result object.\n   */\n  merge: function merge(dst, src, p) {\n    var res = {};\n    src = Deffy(src, {});\n    dst = Deffy(dst, {});\n\n    for (var k in src) {\n      res[k] = src[k];\n    }\n\n    for (var _k in dst) {\n      if (undefined === dst[_k]) {\n        continue;\n      }\n\n      res[_k] = dst[_k];\n    }\n\n    return res;\n  }\n  /**\n   * deepMerge\n   * Recursively merge the objects from arguments, returning a new object.\n   *\n   * Usage: `Ul.deepMerge(obj1, obj2, obj3, obj4, ..., objN)`\n   *\n   * @name deepMerge\n   * @function\n   * @return {Object} The merged objects.\n   */\n  ,\n  deepMerge: function deepMerge() {\n    var dst = {},\n        src = null,\n        p = null,\n        args = [].splice.call(arguments, 0);\n\n    while (args.length > 0) {\n      src = args.splice(-1)[0];\n\n      if (!typpy(src, Object)) {\n        continue;\n      }\n\n      for (p in src) {\n        if (!src.hasOwnProperty(p)) {\n          continue;\n        }\n\n        if (typpy(src[p], Object)) {\n          dst[p] = this.deepMerge(src[p], dst[p] || {});\n        } else {\n          if (src[p] !== undefined) {\n            dst[p] = src[p];\n          }\n        }\n      }\n    }\n\n    return dst;\n  }\n  /**\n   * clone\n   * Deep clone of the provided item.\n   *\n   * @name clone\n   * @function\n   * @param {Anything} item The item that should be cloned\n   * @return {Anything} The cloned object\n   */\n  ,\n  clone: function clone(item) {\n    if (!item) {\n      return item;\n    }\n\n    var types = [Number, String, Boolean],\n        result = undefined;\n\n    for (var _i = 0; _i < types.length; ++_i) {\n      var type = types[_i];\n\n      if (item instanceof type) {\n        result = type(item);\n      }\n    }\n\n    if (typeof result == \"undefined\") {\n      if (Array.isArray(item)) {\n        result = [];\n\n        for (var i = 0; i < item.length; ++i) {\n          result[i] = this.clone(item[i]);\n        }\n      } else if ((typeof item === \"undefined\" ? \"undefined\" : _typeof(item)) == \"object\") {\n        if (!item.prototype) {\n          if (item instanceof Date) {\n            result = new Date(item);\n          } else {\n            result = {};\n\n            for (i in item) {\n              result[i] = this.clone(item[i]);\n            }\n          }\n        } else {\n          result = item;\n        }\n      } else {\n        result = item;\n      }\n    }\n\n    return result;\n  },\n  HOME_DIR: process.env[process.platform == \"win32\" ? \"USERPROFILE\" : \"HOME\"]\n  /**\n   * home\n   * Get the home directory path on any platform. The value can be\n   * accessed using `Ul.HOME_DIR` too.\n   *\n   * @name home\n   * @function\n   * @return {String} The home directory path.\n   */\n  ,\n  home: function home() {\n    return this.HOME_DIR;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
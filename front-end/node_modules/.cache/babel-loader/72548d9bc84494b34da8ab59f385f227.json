{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { componentPropType } from '@material-ui/utils';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport withStyles from '../styles/withStyles';\nimport { capitalize } from '../utils/helpers';\nimport { isMuiElement } from '../utils/reactHelpers';\nimport FormControlContext from './FormControlContext';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    verticalAlign: 'top' // Fix alignment issue on Safari.\n\n  },\n\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  }\n};\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * ⚠️ Only one input can be used within a FormControl.\n */\n\nclass FormControl extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.disabled && state.focused) {\n      return {\n        focused: false\n      };\n    }\n\n    return null;\n  }\n\n  constructor(props) {\n    super();\n\n    this.handleFocus = () => {\n      this.setState(state => !state.focused ? {\n        focused: true\n      } : null);\n    };\n\n    this.handleBlur = () => {\n      this.setState(state => state.focused ? {\n        focused: false\n      } : null);\n    };\n\n    this.handleDirty = () => {\n      if (!this.state.filled) {\n        this.setState({\n          filled: true\n        });\n      }\n    };\n\n    this.handleClean = () => {\n      if (this.state.filled) {\n        this.setState({\n          filled: false\n        });\n      }\n    };\n\n    this.state = {\n      adornedStart: false,\n      filled: false,\n      focused: false\n    }; // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n\n    const children = props.children;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          this.state.filled = true;\n        }\n\n        const input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          this.state.adornedStart = true;\n        }\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          Component = _this$props.component,\n          disabled = _this$props.disabled,\n          error = _this$props.error,\n          fullWidth = _this$props.fullWidth,\n          margin = _this$props.margin,\n          required = _this$props.required,\n          variant = _this$props.variant,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"classes\", \"className\", \"component\", \"disabled\", \"error\", \"fullWidth\", \"margin\", \"required\", \"variant\"]);\n\n    const _this$state = this.state,\n          adornedStart = _this$state.adornedStart,\n          filled = _this$state.filled,\n          focused = _this$state.focused;\n    const childContext = {\n      adornedStart,\n      disabled,\n      error,\n      filled,\n      focused,\n      margin,\n      onBlur: this.handleBlur,\n      onEmpty: this.handleClean,\n      onFilled: this.handleDirty,\n      onFocus: this.handleFocus,\n      required,\n      variant\n    };\n    return React.createElement(FormControlContext.Provider, {\n      value: childContext\n    }, React.createElement(Component, _extends({\n      className: classNames(classes.root, {\n        [classes[\"margin\".concat(capitalize(margin))]]: margin !== 'none',\n        [classes.fullWidth]: fullWidth\n      }, className)\n    }, other)));\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes = {\n  /**\n   * The contents of the form control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: componentPropType,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nFormControl.defaultProps = {\n  component: 'div',\n  disabled: false,\n  error: false,\n  fullWidth: false,\n  margin: 'none',\n  required: false,\n  variant: 'standard'\n};\nexport default withStyles(styles, {\n  name: 'MuiFormControl'\n})(FormControl);","map":null,"metadata":{},"sourceType":"module"}